node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2803
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 2803
          }
        }
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed0.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed1.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed10.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed100.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed101.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed102.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed103.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed104.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed105.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed106.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed107.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed108.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed109.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed11.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed110.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed111.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed112.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed113.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed114.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed115.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed116.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed117.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed118.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed119.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed12.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed120.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed121.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed122.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed123.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed124.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed125.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed126.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed127.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed128.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed129.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed13.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed130.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed131.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed132.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed133.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed134.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed135.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed136.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed137.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed138.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed139.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed14.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed140.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed141.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed142.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed143.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed144.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed145.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed146.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed147.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed148.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed149.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed15.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed150.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed151.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed152.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed153.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed154.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed155.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed156.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed157.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed158.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed159.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed16.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed160.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed161.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed162.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed163.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed164.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed165.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed166.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed167.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed168.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed169.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed17.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed170.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed171.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed172.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed173.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed174.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed175.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed176.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed177.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed178.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed179.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed18.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed180.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed181.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed182.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed183.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed184.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed185.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed186.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed187.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed188.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed189.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed19.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed190.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed191.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed192.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed193.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed194.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed195.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed196.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed197.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed198.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed199.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed2.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed20.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed200.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed201.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed202.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed203.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed204.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed205.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed206.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed207.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed208.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed209.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed21.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed210.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed211.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed212.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed213.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed214.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed215.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed216.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed217.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed218.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed219.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed22.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed220.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed221.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed222.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed223.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed224.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed225.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed226.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed227.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed228.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed229.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed23.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed230.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed231.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed232.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed233.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed234.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed235.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed236.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed237.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed238.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed239.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed24.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed240.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed241.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed242.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed243.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed244.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed245.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed246.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed247.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed248.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed249.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed25.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed250.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed251.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed252.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed253.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed254.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed255.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed256.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed257.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed258.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed259.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed26.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed260.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed261.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed262.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed263.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed264.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed265.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed266.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed267.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed268.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed269.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed27.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed270.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed271.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed272.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed273.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed274.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed275.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed276.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed277.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed278.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed279.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed28.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed280.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed281.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed282.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed283.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed284.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed285.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed286.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed287.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed288.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed289.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed29.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed290.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed291.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed292.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed293.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed294.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed295.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed296.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed297.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed298.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed299.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed3.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed30.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed300.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed301.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed302.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed303.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed304.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed305.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed306.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed307.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed308.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed309.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed31.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed310.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed311.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed312.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed313.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed314.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed315.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed316.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed317.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed318.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed319.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed32.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed320.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed321.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed322.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed323.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed324.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed325.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed326.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed327.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed328.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed329.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed33.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed330.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed331.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed332.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed333.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed334.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed335.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed336.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed337.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed338.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed339.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed34.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed340.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed341.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed342.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed343.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed344.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed345.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed346.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed347.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed348.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed349.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed35.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed350.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed351.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed352.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed353.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed354.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed355.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed356.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed357.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed358.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed359.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed36.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed360.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed361.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed362.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed363.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed364.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed365.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed366.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed367.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed368.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed37.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed370.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed371.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed372.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed373.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed374.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed375.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed376.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed377.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed378.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed379.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed38.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed380.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed381.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed382.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed384.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed385.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed386.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed387.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed388.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed389.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed39.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed390.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed391.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed392.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed393.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed394.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed395.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed396.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed397.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed398.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed399.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed4.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed40.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed400.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed401.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed402.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed403.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed404.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed405.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed406.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed407.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed408.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed409.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed41.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed410.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed411.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed412.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed413.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed414.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed415.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed416.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed417.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed418.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed419.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed42.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed420.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed421.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed422.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed423.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed424.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed425.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed426.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed427.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed428.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed429.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed43.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed430.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed431.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed432.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed433.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed434.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed435.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed436.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed437.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed438.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed439.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed44.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed440.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed441.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed442.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed443.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed444.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed445.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed446.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed447.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed448.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed449.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed45.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed450.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed451.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed452.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed46.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed47.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed48.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed49.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed5.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed50.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed51.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed52.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed53.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed54.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed55.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed56.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed57.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed58.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed59.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed6.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed60.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed61.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed62.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed63.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed64.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed65.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed66.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed67.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed68.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed69.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed7.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed70.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed71.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed72.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed73.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed74.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed75.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed76.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed77.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed78.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed79.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed8.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed80.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed81.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed82.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed83.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed84.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed85.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed86.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed87.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed88.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed89.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed9.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed90.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed91.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed92.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed93.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed94.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed95.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed96.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed97.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed98.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\baby-bed99.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\babyantcribs.gif"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\georgia-bulldogs-crib-bedding.gif"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\woodstore_1804_17878434 (1).gif"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\woodstore_1804_17878434.gif"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\baby-bed\\yhst-69328165909994_1973_168407868.jpeg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed1000.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed1001.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed453.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed454.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed455.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed456.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed457.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed458.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed459.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed460.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed461.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed462.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed463.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed464.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed465.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed466.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed467.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed468.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed469.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed470.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed471.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed472.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed473.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed474.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed475.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed476.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed477.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed478.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed479.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed480.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed481.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed482.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed483.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed484.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed485.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed486.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed487.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed488.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed489.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed490.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed491.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed492.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed493.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed494.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed495.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed496.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed497.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed498.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed499.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed500.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed501.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed502.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed503.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed504.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed505.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed506.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed507.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed508.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed509.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed510.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed511.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed512.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed513.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed514.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed515.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed516.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed517.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed518.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed519.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed520.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed521.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed522.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed523.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed524.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed525.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed526.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed527.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed528.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed529.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed530.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed531.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed532.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed533.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed534.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed535.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed536.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed537.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed538.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed539.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed540.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed541.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed542.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed543.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed544.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed545.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed546.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed547.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed548.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed549.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed550.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed551.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed552.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed553.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed554.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed555.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed556.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed557.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed558.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed559.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed560.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed561.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed562.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed563.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed564.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed565.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed566.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed567.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed568.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed569.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed570.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed571.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed572.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed573.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed574.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed575.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed576.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed577.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed578.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed579.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed580.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed581.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed582.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed583.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed584.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed585.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed586.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed587.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed588.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed589.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed590.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed591.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed592.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed593.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed594.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed595.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed596.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed597.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed598.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed599.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed600.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed601.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed602.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed603.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed604.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed605.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed606.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed607.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed608.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed609.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed610.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed611.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed612.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed613.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed614.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed615.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed616.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed617.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed618.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed619.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed620.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed621.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed622.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed623.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed624.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed625.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed626.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed627.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed628.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed629.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed630.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed631.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed632.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed633.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed634.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed635.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed636.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed637.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed638.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed639.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed640.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed641.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed642.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed643.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed644.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed645.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed646.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed647.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed648.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed649.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed650.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed651.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed652.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed653.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed654.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed655.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed656.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed657.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed658.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed659.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed660.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed661.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed662.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed663.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed664.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed665.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed666.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed667.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed668.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed669.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed670.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed671.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed672.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed673.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed674.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed675.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed676.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed677.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed678.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed679.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed680.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed681.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed682.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed683.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed684.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed685.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed686.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed687.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed688.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed689.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed690.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed691.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed692.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed693.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed694.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed695.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed696.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed697.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed698.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed699.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed700.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed701.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed702.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed703.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed704.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed705.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed706.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed707.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed708.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed709.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed710.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed711.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed712.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed713.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed714.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed715.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed716.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed717.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed718.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed719.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed720.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed721.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed722.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed723.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed724.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed725.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed726.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed727.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed728.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed729.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed730.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed731.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed732.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed733.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed734.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed735.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed736.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed737.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed738.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed739.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed740.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed741.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed742.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed743.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed744.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed745.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed746.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed747.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed748.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed749.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed750.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed751.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed752.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed753.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed754.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed755.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed756.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed757.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed758.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed759.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed760.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed761.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed762.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed763.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed764.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed765.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed766.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed767.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed768.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed769.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed770.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed771.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed772.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed773.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed774.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed775.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed776.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed777.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed778.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed779.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed780.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed781.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed782.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed783.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed784.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed785.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed786.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed787.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed788.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed789.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed790.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed791.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed792.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed793.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed794.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed795.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed796.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed797.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed798.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed799.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed800.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed801.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed802.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed803.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed804.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed805.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed806.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed807.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed808.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed809.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed810.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed811.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed812.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed813.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed814.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed815.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed816.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed817.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed818.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed819.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed820.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed821.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed822.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed823.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed824.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed825.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed826.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed827.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed828.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed829.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed830.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed831.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed832.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed833.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed834.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed835.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed836.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed837.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed838.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed839.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed840.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed841.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed842.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed843.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed844.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed845.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed846.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed847.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed848.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed849.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed850.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed851.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed852.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed853.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed854.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed855.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed856.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed857.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed858.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed859.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed860.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed861.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed862.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed863.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed864.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed865.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed866.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed867.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed868.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed869.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed870.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed871.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed872.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed873.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed874.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed875.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed876.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed877.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed878.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed879.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed880.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed881.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed882.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed883.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed884.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed885.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed886.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed887.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed888.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed889.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed890.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed891.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed892.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed893.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed894.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed895.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed896.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed897.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed898.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed899.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed900.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed901.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed902.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed903.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed904.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed905.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed906.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed907.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed908.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed909.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed910.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed911.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed912.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed913.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed914.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed915.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed916.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed917.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed918.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed919.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed920.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed921.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed922.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed923.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed924.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed925.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed926.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed927.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed928.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed929.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed930.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed931.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed932.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed933.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed934.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed935.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed936.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed937.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed938.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed939.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed940.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed941.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed942.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed943.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed944.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed945.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed946.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed947.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed948.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed949.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed950.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed951.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed952.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed953.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed954.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed955.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed956.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed957.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed958.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed959.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed960.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed961.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed962.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed963.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed964.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed965.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed966.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed967.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed968.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed969.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed970.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed971.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed972.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed973.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed974.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed975.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed976.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed977.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed978.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed979.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed980.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed981.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed982.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed983.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed984.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed985.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed986.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed987.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed988.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed989.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed990.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed991.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed992.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed993.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed994.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed995.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed996.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed997.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed998.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\bunk-bed\\bunk-bed999.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1002.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1003.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1004.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1005.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1006.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1007.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1008.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1009.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1010.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1011.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1012.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1013.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1014.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1015.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1016.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1017.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1018.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1019.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1020.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1021.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1022.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1023.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1024.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1025.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1026.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1027.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1028.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1029.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1030.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1031.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1032.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1033.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1034.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1035.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1036.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1037.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1038.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1039.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1040.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1041.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1042.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1043.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1044.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1045.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1046.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1047.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1048.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1049.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1050.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1051.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1052.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1053.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1054.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1055.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1056.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1057.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1058.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1059.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1060.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1061.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1062.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1063.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1064.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1065.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1066.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1067.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1068.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1069.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1070.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1071.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1072.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1073.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1074.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1075.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1076.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1077.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1078.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1079.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1080.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1081.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1082.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1083.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1084.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1085.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1086.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1087.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1088.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1089.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1090.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1091.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1092.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1093.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1094.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1095.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1096.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1097.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1098.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1099.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1100.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1101.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1102.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1103.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1104.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1105.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1106.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1107.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1108.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1109.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1110.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1111.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1112.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1113.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1114.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1115.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1116.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1117.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1118.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1119.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1120.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1121.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1122.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1123.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1124.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1125.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1126.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1127.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1128.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1129.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1130.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1131.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1132.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1133.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1134.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1135.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1136.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1137.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1138.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1139.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1140.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1141.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1142.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1143.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1144.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1145.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1146.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1147.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1148.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1149.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1150.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1151.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1152.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1153.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1154.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1155.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1156.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1157.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1158.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1159.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1160.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1161.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1162.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1163.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1164.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1165.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1166.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1167.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1168.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1169.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1170.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1171.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1172.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1173.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1174.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1175.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1176.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1177.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1178.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1179.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1180.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1181.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1182.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1183.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1184.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1185.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1186.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1187.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1188.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1189.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1190.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1191.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1192.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1193.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1194.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1195.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1196.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1197.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1198.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1199.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1200.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1201.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1202.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1203.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1204.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1205.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1206.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1207.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1208.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1209.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1210.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1211.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1212.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1213.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1214.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1215.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1216.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1217.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1218.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1219.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1220.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1221.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1222.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1223.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1224.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1225.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1226.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1227.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1228.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1229.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1230.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1231.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1232.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1233.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1234.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1235.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1236.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1237.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1238.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1239.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1240.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1241.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1242.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1243.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1244.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1245.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1246.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1247.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1248.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1249.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1250.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1251.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1252.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1253.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1254.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1255.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1256.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1257.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1258.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1259.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1260.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1261.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1262.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1263.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1264.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1265.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1266.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1267.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1268.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1269.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1270.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1271.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1272.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1273.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1274.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1275.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1276.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1277.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1278.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1279.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1280.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1281.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1282.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1283.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1284.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1285.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1286.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1287.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1288.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1289.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1290.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1291.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1292.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1293.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1294.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1295.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1296.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1297.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1298.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1299.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1300.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1301.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1302.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1303.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1304.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1305.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1306.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1307.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1308.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1309.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1310.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1311.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1312.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1313.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1314.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1315.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1316.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1317.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1318.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1319.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1320.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1321.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1322.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1323.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1324.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1325.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1326.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1327.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1328.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1329.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1330.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1331.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1332.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1333.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1334.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1335.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1336.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1337.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1338.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1339.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1340.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1341.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1342.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1343.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1344.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1345.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1346.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1347.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1348.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1349.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1350.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1351.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1352.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1353.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1354.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1355.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1356.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1357.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1358.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1359.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1360.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1361.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1362.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1363.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1364.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1365.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1366.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1367.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1368.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1369.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1370.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1371.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1372.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1373.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1374.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1375.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1376.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1377.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1378.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1379.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1380.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1381.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1382.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1383.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1384.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1385.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1386.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1387.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1388.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1389.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1390.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1391.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1392.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1393.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1394.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1395.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1396.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1397.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1398.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1399.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1400.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1401.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1402.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1403.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1404.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1405.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1406.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1407.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1408.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1409.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1410.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1411.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1412.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1413.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1414.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1415.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1416.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1417.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1418.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1419.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1420.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1421.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1422.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1423.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1424.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1425.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1426.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1427.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1428.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1429.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1430.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1431.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1432.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1433.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1434.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1435.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1436.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1437.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1438.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1439.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1440.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1441.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1442.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1443.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1444.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1445.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1446.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1447.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1448.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1449.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1450.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1451.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1452.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1453.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1454.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1455.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1456.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1457.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1458.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1459.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1460.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\double-bed1461.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\double-bed\\doublebed.gif"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1462.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1463.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1464.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1465.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1466.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1467.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1468.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1469.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1470.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1471.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1472.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1473.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1474.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1475.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1476.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1477.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1478.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1479.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1480.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1481.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1482.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1483.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1484.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1485.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1486.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1487.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1488.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1489.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1490.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1491.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1492.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1493.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1494.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1495.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1496.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1497.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1498.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1499.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1500.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1501.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1502.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1503.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1504.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1505.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1506.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1507.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1508.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1509.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1510.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1511.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1512.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1513.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1514.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1515.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1516.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1517.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1518.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1519.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1520.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1521.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1522.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1523.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1524.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1525.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1526.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1527.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1528.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1529.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1530.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1531.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1532.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1533.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1534.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1535.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1536.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1537.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1538.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1539.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1540.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1541.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1542.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1543.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1544.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1545.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1546.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1547.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1548.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1549.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1550.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1551.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1552.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1553.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1554.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1555.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1556.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1557.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1558.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1559.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1560.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1561.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1562.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1563.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1564.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1565.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1566.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1567.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1568.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1569.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1570.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1571.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1572.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1573.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1574.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1575.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1576.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1577.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1578.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1579.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1580.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1581.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1582.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1583.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1584.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1585.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1586.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1587.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1588.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1589.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1590.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1591.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1592.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1593.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1594.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1595.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1596.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1597.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1598.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1599.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1600.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1601.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1602.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1603.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1604.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1605.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1606.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1607.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1608.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1609.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1610.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1611.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1612.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1613.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1614.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1615.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1616.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1617.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1618.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1619.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1620.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1621.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1622.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1623.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1624.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1625.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1626.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1627.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1628.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1629.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1630.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1631.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1632.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1633.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1634.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1635.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1636.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1637.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1638.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1639.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1640.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1641.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1642.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1643.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1644.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1645.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1646.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1647.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1648.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1649.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1650.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1651.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1652.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1653.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1654.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1655.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1656.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1657.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1658.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1659.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1660.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1661.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1662.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1663.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1664.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1665.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1666.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1667.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1668.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1669.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1670.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1671.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1672.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1673.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1674.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1675.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1676.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1677.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1678.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1679.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1680.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1681.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1682.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1683.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1684.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1685.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1686.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1687.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1688.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1689.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1690.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1691.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1692.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1693.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1694.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1695.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1696.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1697.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1698.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1699.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1700.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1701.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1702.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1703.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1704.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1705.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1706.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1707.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1708.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1709.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1710.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1711.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1712.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1713.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1714.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1715.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1716.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1717.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1718.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1719.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1720.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1721.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1722.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1723.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1724.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1725.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1726.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1727.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1728.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1729.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1730.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1731.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1732.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1733.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1734.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1735.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1736.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1737.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1738.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1739.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1740.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1741.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1742.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1743.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1744.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1745.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1746.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1747.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1748.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1749.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1750.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1751.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1752.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1753.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1754.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1755.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1756.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1757.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1758.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1759.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1760.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1761.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1762.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1763.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1764.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1765.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1766.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1767.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1768.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1769.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1770.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1771.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1772.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1773.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1774.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1775.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1776.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1777.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1778.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1779.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1780.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1781.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1782.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1783.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1784.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1785.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1786.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1787.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1788.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1789.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1790.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1791.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1792.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1793.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1794.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1795.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1796.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1797.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1798.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1799.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1800.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1801.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1802.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1803.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1804.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1805.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1806.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1807.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1808.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1809.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1810.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1811.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1812.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1813.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1814.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1815.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1816.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1817.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1818.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1819.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1820.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1821.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1822.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1823.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1824.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1825.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1826.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1827.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1828.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1829.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1830.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1831.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1832.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1833.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1834.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1835.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1836.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1837.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1838.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1839.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1840.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1841.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1842.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1843.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1844.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1845.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1846.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1847.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1848.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1849.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1850.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1851.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1852.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1853.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1854.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1855.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1856.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1857.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1858.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1859.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1860.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1861.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1862.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1863.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1864.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1865.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1866.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1867.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1868.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1869.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1870.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1871.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1872.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1873.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1874.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1875.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1876.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1877.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1878.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1879.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1880.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1881.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1882.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1883.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1884.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1885.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1886.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1887.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1888.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1889.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1890.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1891.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1892.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1893.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1894.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1895.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1896.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1897.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1898.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1899.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1900.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1901.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1902.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1903.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1904.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1905.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1906.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1907.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1908.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1909.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1910.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1911.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1912.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1913.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1914.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1915.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1916.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1917.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1918.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1919.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1920.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1921.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1922.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1923.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1924.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1925.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1926.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1927.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1928.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1929.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1930.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1931.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1932.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1933.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1934.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1935.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1936.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1937.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1938.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1939.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1940.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1941.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1942.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1943.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1944.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1945.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1946.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1947.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1948.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1949.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1950.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1951.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1952.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1953.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1954.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1955.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1956.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1957.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1958.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1959.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1960.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1961.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1962.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1963.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1964.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1965.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1966.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1967.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1968.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1969.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1970.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1971.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1972.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1973.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1974.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1975.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1976.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1977.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1978.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1979.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1980.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1981.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1982.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1983.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1984.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1985.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1986.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1987.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1988.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1989.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1990.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1991.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1992.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1993.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1994.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1995.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1996.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1997.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1998.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock1999.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2000.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2001.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2002.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2003.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2004.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2005.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2006.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2007.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2008.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2009.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2010.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2011.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2012.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2013.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2014.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2015.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2016.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2017.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2018.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2019.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2020.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2021.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\hammock\\hammock2022.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2023.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2024.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2025.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2026.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2027.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2028.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2029.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2030.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2031.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2032.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2033.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2034.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2035.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2036.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2037.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2038.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2039.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2040.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2041.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2042.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2043.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2044.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2045.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2046.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2047.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2048.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2049.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2050.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2051.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2052.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2053.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2054.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2055.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2056.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2057.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2058.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2059.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2060.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2061.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2062.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2063.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2064.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2065.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2066.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2067.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2068.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2069.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2070.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2071.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2072.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2073.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2074.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2075.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2076.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2077.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2078.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2079.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2080.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2081.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2082.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2083.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2084.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2085.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2086.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2087.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2088.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2089.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2090.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2091.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2092.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2093.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2094.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2095.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2096.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2097.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2098.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2099.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2100.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2101.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2102.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2103.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2104.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2105.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2106.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2107.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2108.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2109.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2110.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2111.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2112.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2113.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2114.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2115.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2116.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2117.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2118.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2119.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2120.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2121.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2122.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2123.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2124.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2125.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2126.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2127.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2128.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2129.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2130.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2131.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2132.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2133.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2134.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2135.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2136.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2137.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2138.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2139.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2140.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2141.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2142.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2143.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2144.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2145.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2146.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2147.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2148.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2149.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2150.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2151.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2152.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2153.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2154.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2155.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2156.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2157.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2158.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2159.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2160.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2161.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2162.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2163.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2164.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2165.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2166.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2167.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2168.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2169.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2170.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2171.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2172.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2173.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2174.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2175.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2176.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2177.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2178.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2179.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2180.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2181.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2182.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2183.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2184.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2185.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2186.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2187.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2188.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2189.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2190.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2191.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2192.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2193.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2194.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2195.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2196.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2197.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2198.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2199.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2200.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2201.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2202.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2203.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2204.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2205.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2206.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2207.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2208.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2209.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2211.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2212.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2213.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2214.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2215.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2216.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2217.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2218.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2219.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2220.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2221.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2222.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2223.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2224.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2225.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2226.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2227.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2228.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2229.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2230.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2231.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2232.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2233.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2234.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2235.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2236.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2237.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2238.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2239.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2240.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2241.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2242.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2243.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2244.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2245.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2246.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2247.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2248.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2249.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2250.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2251.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2252.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2253.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2254.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2255.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2256.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2257.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2258.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2259.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2260.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2261.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2262.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2263.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2264.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2265.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2266.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2267.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2268.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2269.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2270.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2271.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2272.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2273.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2274.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2275.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2276.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2277.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2278.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2279.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2280.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2281.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2282.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2284.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2285.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2286.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2287.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2288.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2289.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2290.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2291.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2292.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2293.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2294.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2295.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2296.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2297.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2298.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2299.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2300.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2301.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2302.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2303.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2304.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2305.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2306.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2307.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2308.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2309.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2310.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2311.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2312.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2313.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2314.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2315.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2316.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2317.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2318.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2319.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2320.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2321.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2322.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2323.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2324.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2325.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2326.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2327.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2328.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2329.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2330.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2331.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2332.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2333.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2334.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2335.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2336.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2337.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2338.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2339.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2340.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2341.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2342.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2343.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2344.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2345.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2346.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2347.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2348.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2349.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2350.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2351.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2352.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2353.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2354.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2355.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2356.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2357.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2358.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2359.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2360.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2361.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2362.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2363.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2364.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2365.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2366.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2367.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2368.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2369.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2370.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2371.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2372.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2373.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2374.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2375.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2376.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2377.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2378.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2379.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2380.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2381.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2382.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2383.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2384.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2385.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2386.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2387.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2388.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2389.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2390.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2391.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2392.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2393.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2394.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2395.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2396.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2397.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2398.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2399.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2400.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2401.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2402.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2403.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2404.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2405.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2406.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2407.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2408.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2409.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2410.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2411.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2412.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2413.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2414.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2415.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2416.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2417.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2418.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2419.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2420.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2421.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2422.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2423.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2424.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2425.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2426.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2427.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2428.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2429.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2430.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2431.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2432.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2433.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2434.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2435.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2436.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2437.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2438.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2439.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2440.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2441.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2442.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2443.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2444.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2445.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2446.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2447.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2448.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2449.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2450.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2451.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2452.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2453.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2454.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2455.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2456.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2457.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2458.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2459.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2460.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2461.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2462.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2463.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2464.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2465.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2466.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2467.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2468.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2469.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2470.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2471.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2472.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2473.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2474.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2475.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2476.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2477.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2478.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2479.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2480.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2481.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2482.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2483.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2484.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2485.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2486.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2487.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2488.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2489.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2490.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2491.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2492.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\round-bed\\round-bed2493.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2494.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2495.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2496.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2497.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2498.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2499.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2500.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2501.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2502.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2503.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2504.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2505.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2506.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2507.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2508.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2509.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2510.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2511.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2512.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2513.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2514.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2515.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2516.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2517.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2518.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2519.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2520.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2521.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2522.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2523.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2524.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2525.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2526.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2527.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2528.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2529.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2530.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2531.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2532.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2533.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2534.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2535.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2536.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2537.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2538.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2539.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2540.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2541.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2542.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2543.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2544.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2545.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2546.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2547.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2548.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2549.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2550.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2551.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2552.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2553.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2554.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2555.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2556.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2557.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2558.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2559.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2560.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2561.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2562.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2563.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2564.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2565.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2566.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2567.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2568.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2569.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2570.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2571.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2572.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2573.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2574.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2575.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2576.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2577.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2578.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2579.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2580.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2581.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2582.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2583.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2584.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2585.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2586.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2587.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2588.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2589.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2590.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2591.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2592.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2593.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2594.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2595.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2596.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2597.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2598.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2599.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2600.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2601.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2602.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2603.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2604.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2605.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2606.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2607.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2608.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2609.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2610.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2611.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2612.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2613.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2614.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2615.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2616.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2617.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2618.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2619.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2620.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2621.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2622.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2623.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2624.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2625.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2626.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2627.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2628.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2629.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2630.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2631.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2632.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2633.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2634.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2635.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2636.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2637.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2638.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2639.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2640.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2641.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2642.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2643.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2644.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2645.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2646.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2647.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2648.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2649.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2650.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2651.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2652.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2653.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2654.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2655.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2656.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2657.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2658.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2659.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2660.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2661.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2662.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2663.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2664.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2665.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2666.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2667.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2668.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2669.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2670.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2671.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2672.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2673.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2674.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2675.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2676.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2677.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2678.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2679.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2680.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2681.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2682.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2683.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2684.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2685.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2686.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2687.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2688.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2689.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2690.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2691.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2692.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2693.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2694.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2695.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2696.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2697.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2698.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2699.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2700.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2701.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2702.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2703.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2704.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2705.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2706.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2707.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2708.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2709.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2710.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2711.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2712.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2713.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2714.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2715.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2716.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2717.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2718.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2719.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2720.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2721.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2722.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2723.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2724.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2725.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2726.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2727.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2728.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2729.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2730.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2731.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2732.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2733.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2734.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2735.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2736.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2737.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2738.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2739.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2740.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2741.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2742.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2743.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2744.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2745.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2746.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2747.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2748.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2749.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2750.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2751.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2752.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2753.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2754.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2755.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2756.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2758.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2759.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2760.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2761.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2763.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2764.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2766.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2767.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2768.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2769.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2770.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2771.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2772.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2773.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2774.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2775.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2776.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2777.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2778.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2779.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2780.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2781.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2782.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2783.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2784.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2785.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2788.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2789.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2790.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2791.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2792.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2793.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2794.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2795.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2796.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2797.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2798.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2801.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2802.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2803.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2804.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2805.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2806.jpg"
        string_val: "D:\\TensorFlowDev\\PythonWorksp\\TensorFlow\\furniture\\bed\\single-bed\\single-bed2807.jpg"
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2803
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2803
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "input_producer/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2803
      }
    }
  }
}
node {
  name: "input_producer/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_producer/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_producer/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_producer/strided_slice"
  op: "StridedSlice"
  input: "input_producer/Shape"
  input: "input_producer/strided_slice/stack"
  input: "input_producer/strided_slice/stack_1"
  input: "input_producer/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "input_producer/input_producer/range/start"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_producer/input_producer/range/delta"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_producer/input_producer/range"
  op: "Range"
  input: "input_producer/input_producer/range/start"
  input: "input_producer/strided_slice"
  input: "input_producer/input_producer/range/delta"
  device: "/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_producer/input_producer/RandomShuffle"
  op: "RandomShuffle"
  input: "input_producer/input_producer/range"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "input_producer/input_producer"
  op: "FIFOQueueV2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "capacity"
    value {
      i: 32
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "input_producer/input_producer/input_producer_EnqueueMany"
  op: "QueueEnqueueManyV2"
  input: "input_producer/input_producer"
  input: "input_producer/input_producer/RandomShuffle"
  device: "/device:CPU:0"
  attr {
    key: "Tcomponents"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "input_producer/input_producer/input_producer_Close"
  op: "QueueCloseV2"
  input: "input_producer/input_producer"
  device: "/device:CPU:0"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: false
    }
  }
}
node {
  name: "input_producer/input_producer/input_producer_Close_1"
  op: "QueueCloseV2"
  input: "input_producer/input_producer"
  device: "/device:CPU:0"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: true
    }
  }
}
node {
  name: "input_producer/input_producer/input_producer_Size"
  op: "QueueSizeV2"
  input: "input_producer/input_producer"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "input_producer/input_producer/Cast"
  op: "Cast"
  input: "input_producer/input_producer/input_producer_Size"
  device: "/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "input_producer/input_producer/mul/y"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03125
      }
    }
  }
}
node {
  name: "input_producer/input_producer/mul"
  op: "Mul"
  input: "input_producer/input_producer/Cast"
  input: "input_producer/input_producer/mul/y"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "input_producer/input_producer/fraction_of_32_full/tags"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "input_producer/input_producer/fraction_of_32_full"
      }
    }
  }
}
node {
  name: "input_producer/input_producer/fraction_of_32_full"
  op: "ScalarSummary"
  input: "input_producer/input_producer/fraction_of_32_full/tags"
  input: "input_producer/input_producer/mul"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "input_producer/input_producer_Dequeue"
  op: "QueueDequeueV2"
  input: "input_producer/input_producer"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "input_producer/Gather"
  op: "Gather"
  input: "Const"
  input: "input_producer/input_producer_Dequeue"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "input_producer/Gather_1"
  op: "Gather"
  input: "Const_1"
  input: "input_producer/input_producer_Dequeue"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "ReadFile"
  op: "ReadFile"
  input: "input_producer/Gather"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "DecodeJpeg"
  op: "DecodeJpeg"
  input: "ReadFile"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "acceptable_fraction"
    value {
      f: 1.0
    }
  }
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dct_method"
    value {
      s: ""
    }
  }
  attr {
    key: "fancy_upscaling"
    value {
      b: true
    }
  }
  attr {
    key: "ratio"
    value {
      i: 1
    }
  }
  attr {
    key: "try_recover_truncated"
    value {
      b: false
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "DecodeJpeg"
  device: "/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "ExpandDims/dim"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ExpandDims"
  op: "ExpandDims"
  input: "Cast"
  input: "ExpandDims/dim"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "ResizeBilinear"
  op: "ResizeBilinear"
  input: "ExpandDims"
  input: "size"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "Squeeze"
  op: "Squeeze"
  input: "ResizeBilinear"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "control_dependency"
  op: "Identity"
  input: "Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Squeeze"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "random_uniform/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "random_uniform/min"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "random_uniform/max"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "random_uniform/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "random_uniform/sub"
  op: "Sub"
  input: "random_uniform/max"
  input: "random_uniform/min"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "random_uniform/mul"
  op: "Mul"
  input: "random_uniform/RandomUniform"
  input: "random_uniform/sub"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "random_uniform"
  op: "Add"
  input: "random_uniform/mul"
  input: "random_uniform/min"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Less/y"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "Less"
  op: "Less"
  input: "random_uniform"
  input: "Less/y"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Switch"
  op: "Switch"
  input: "Less"
  input: "Less"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_t"
  op: "Identity"
  input: "cond/Switch:1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_f"
  op: "Identity"
  input: "cond/Switch"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/pred_id"
  op: "Identity"
  input: "Less"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/ReverseV2/axis"
  op: "Const"
  input: "^cond/switch_t"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/ReverseV2/Switch"
  op: "Switch"
  input: "control_dependency"
  input: "cond/pred_id"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Squeeze"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond/ReverseV2"
  op: "ReverseV2"
  input: "cond/ReverseV2/Switch:1"
  input: "cond/ReverseV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond/Switch_1"
  op: "Switch"
  input: "control_dependency"
  input: "cond/pred_id"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Squeeze"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond/Merge"
  op: "Merge"
  input: "cond/Switch_1"
  input: "cond/ReverseV2"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "random_uniform_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "random_uniform_1/min"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -63.0
      }
    }
  }
}
node {
  name: "random_uniform_1/max"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 63.0
      }
    }
  }
}
node {
  name: "random_uniform_1/RandomUniform"
  op: "RandomUniform"
  input: "random_uniform_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "random_uniform_1/sub"
  op: "Sub"
  input: "random_uniform_1/max"
  input: "random_uniform_1/min"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "random_uniform_1/mul"
  op: "Mul"
  input: "random_uniform_1/RandomUniform"
  input: "random_uniform_1/sub"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "random_uniform_1"
  op: "Add"
  input: "random_uniform_1/mul"
  input: "random_uniform_1/min"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "adjust_brightness/Identity"
  op: "Identity"
  input: "cond/Merge"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "adjust_brightness"
  op: "Add"
  input: "adjust_brightness/Identity"
  input: "random_uniform_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "adjust_brightness/Identity_1"
  op: "Identity"
  input: "adjust_brightness"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "random_uniform_2/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "random_uniform_2/min"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "random_uniform_2/max"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7999999523162842
      }
    }
  }
}
node {
  name: "random_uniform_2/RandomUniform"
  op: "RandomUniform"
  input: "random_uniform_2/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "random_uniform_2/sub"
  op: "Sub"
  input: "random_uniform_2/max"
  input: "random_uniform_2/min"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "random_uniform_2/mul"
  op: "Mul"
  input: "random_uniform_2/RandomUniform"
  input: "random_uniform_2/sub"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "random_uniform_2"
  op: "Add"
  input: "random_uniform_2/mul"
  input: "random_uniform_2/min"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "adjust_contrast/Identity"
  op: "Identity"
  input: "adjust_brightness/Identity_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "adjust_contrast"
  op: "AdjustContrastv2"
  input: "adjust_contrast/Identity"
  input: "random_uniform_2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "adjust_contrast/Identity_1"
  op: "Identity"
  input: "adjust_contrast"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "control_dependency_1"
  op: "Identity"
  input: "adjust_contrast/Identity_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@adjust_contrast/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: " \000\000\000 \000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Prod"
  op: "Prod"
  input: "Shape"
  input: "Const_2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "control_dependency_1"
  input: "Const_3"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Square"
  op: "Square"
  input: "control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "Mean_1"
  op: "Mean"
  input: "Square"
  input: "Const_4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Square_1"
  op: "Square"
  input: "Mean"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "Mean_1"
  input: "Square_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Relu"
  op: "Relu"
  input: "sub"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Sqrt"
  op: "Sqrt"
  input: "Relu"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Cast_2"
  op: "Cast"
  input: "Prod"
  device: "/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Rsqrt"
  op: "Rsqrt"
  input: "Cast_2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Maximum"
  op: "Maximum"
  input: "Sqrt"
  input: "Rsqrt"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Sub"
  op: "Sub"
  input: "control_dependency_1"
  input: "Mean"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "div"
  op: "RealDiv"
  input: "Sub"
  input: "Maximum"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "shuffle_batch/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "shuffle_batch/random_shuffle_queue"
  op: "RandomShuffleQueueV2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "capacity"
    value {
      i: 584
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "min_after_dequeue"
    value {
      i: 200
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
  attr {
    key: "shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "shuffle_batch/random_shuffle_queue_enqueue"
  op: "QueueEnqueueV2"
  input: "shuffle_batch/random_shuffle_queue"
  input: "div"
  input: "input_producer/Gather_1"
  device: "/device:CPU:0"
  attr {
    key: "Tcomponents"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "shuffle_batch/random_shuffle_queue_Close"
  op: "QueueCloseV2"
  input: "shuffle_batch/random_shuffle_queue"
  device: "/device:CPU:0"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: false
    }
  }
}
node {
  name: "shuffle_batch/random_shuffle_queue_Close_1"
  op: "QueueCloseV2"
  input: "shuffle_batch/random_shuffle_queue"
  device: "/device:CPU:0"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: true
    }
  }
}
node {
  name: "shuffle_batch/random_shuffle_queue_Size"
  op: "QueueSizeV2"
  input: "shuffle_batch/random_shuffle_queue"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "shuffle_batch/sub/y"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "shuffle_batch/sub"
  op: "Sub"
  input: "shuffle_batch/random_shuffle_queue_Size"
  input: "shuffle_batch/sub/y"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "shuffle_batch/Maximum/x"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "shuffle_batch/Maximum"
  op: "Maximum"
  input: "shuffle_batch/Maximum/x"
  input: "shuffle_batch/sub"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "shuffle_batch/Cast"
  op: "Cast"
  input: "shuffle_batch/Maximum"
  device: "/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "shuffle_batch/mul/y"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0026041667442768812
      }
    }
  }
}
node {
  name: "shuffle_batch/mul"
  op: "Mul"
  input: "shuffle_batch/Cast"
  input: "shuffle_batch/mul/y"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "shuffle_batch/fraction_over_200_of_384_full/tags"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "shuffle_batch/fraction_over_200_of_384_full"
      }
    }
  }
}
node {
  name: "shuffle_batch/fraction_over_200_of_384_full"
  op: "ScalarSummary"
  input: "shuffle_batch/fraction_over_200_of_384_full/tags"
  input: "shuffle_batch/mul"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "shuffle_batch/n"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "shuffle_batch"
  op: "QueueDequeueManyV2"
  input: "shuffle_batch/random_shuffle_queue"
  input: "shuffle_batch/n"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "images/tag"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "images"
      }
    }
  }
}
node {
  name: "images"
  op: "ImageSummary"
  input: "images/tag"
  input: "shuffle_batch"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 3
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "shuffle_batch:1"
  input: "Reshape/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "conv1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "conv1/weights/Initializer/truncated_normal/mul"
  input: "conv1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv1/weights"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1/weights/Assign"
  op: "Assign"
  input: "conv1/weights"
  input: "conv1/weights/Initializer/truncated_normal"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/weights/read"
  op: "Identity"
  input: "conv1/weights"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv1/L2Loss"
  op: "L2Loss"
  input: "conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv1/weight_loss/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1/weight_loss"
  op: "Mul"
  input: "conv1/L2Loss"
  input: "conv1/weight_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv1/Conv2D"
  op: "Conv2D"
  input: "shuffle_batch"
  input: "conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1/biases"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1/biases/Assign"
  op: "Assign"
  input: "conv1/biases"
  input: "conv1/biases/Initializer/Const"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/biases/read"
  op: "Identity"
  input: "conv1/biases"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv1/BiasAdd"
  op: "BiasAdd"
  input: "conv1/Conv2D"
  input: "conv1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv1/conv1"
  op: "Relu"
  input: "conv1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv1/conv1/conv1/activations/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv1/conv1/conv1/activations"
      }
    }
  }
}
node {
  name: "conv1/conv1/conv1/activations"
  op: "HistogramSummary"
  input: "conv1/conv1/conv1/activations/tag"
  input: "conv1/conv1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv1/zero_fraction/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1/zero_fraction/Equal"
  op: "Equal"
  input: "conv1/conv1"
  input: "conv1/zero_fraction/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv1/zero_fraction/Cast"
  op: "Cast"
  input: "conv1/zero_fraction/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv1/zero_fraction/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "conv1/zero_fraction/Mean"
  op: "Mean"
  input: "conv1/zero_fraction/Cast"
  input: "conv1/zero_fraction/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "conv1/conv1/conv1/sparsity/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv1/conv1/conv1/sparsity"
      }
    }
  }
}
node {
  name: "conv1/conv1/conv1/sparsity"
  op: "ScalarSummary"
  input: "conv1/conv1/conv1/sparsity/tags"
  input: "conv1/zero_fraction/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "pool1"
  op: "MaxPool"
  input: "conv1/conv1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 3
        i: 3
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "norm1"
  op: "LRN"
  input: "pool1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.00011111111111111112
    }
  }
  attr {
    key: "beta"
    value {
      f: 0.75
    }
  }
  attr {
    key: "bias"
    value {
      f: 1.0
    }
  }
  attr {
    key: "depth_radius"
    value {
      i: 4
    }
  }
}
node {
  name: "conv2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2/weights/Initializer/truncated_normal"
  op: "Add"
  input: "conv2/weights/Initializer/truncated_normal/mul"
  input: "conv2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2/weights"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2/weights/Assign"
  op: "Assign"
  input: "conv2/weights"
  input: "conv2/weights/Initializer/truncated_normal"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/weights/read"
  op: "Identity"
  input: "conv2/weights"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2/L2Loss"
  op: "L2Loss"
  input: "conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv2/weight_loss/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2/weight_loss"
  op: "Mul"
  input: "conv2/L2Loss"
  input: "conv2/weight_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv2/Conv2D"
  op: "Conv2D"
  input: "norm1"
  input: "conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "conv2/biases"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2/biases/Assign"
  op: "Assign"
  input: "conv2/biases"
  input: "conv2/biases/Initializer/Const"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/biases/read"
  op: "Identity"
  input: "conv2/biases"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2/BiasAdd"
  op: "BiasAdd"
  input: "conv2/Conv2D"
  input: "conv2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2/conv2"
  op: "Relu"
  input: "conv2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2/conv2/conv2/activations/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv2/conv2/conv2/activations"
      }
    }
  }
}
node {
  name: "conv2/conv2/conv2/activations"
  op: "HistogramSummary"
  input: "conv2/conv2/conv2/activations/tag"
  input: "conv2/conv2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv2/zero_fraction/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2/zero_fraction/Equal"
  op: "Equal"
  input: "conv2/conv2"
  input: "conv2/zero_fraction/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2/zero_fraction/Cast"
  op: "Cast"
  input: "conv2/zero_fraction/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2/zero_fraction/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "conv2/zero_fraction/Mean"
  op: "Mean"
  input: "conv2/zero_fraction/Cast"
  input: "conv2/zero_fraction/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "conv2/conv2/conv2/sparsity/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv2/conv2/conv2/sparsity"
      }
    }
  }
}
node {
  name: "conv2/conv2/conv2/sparsity"
  op: "ScalarSummary"
  input: "conv2/conv2/conv2/sparsity/tags"
  input: "conv2/zero_fraction/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "norm2"
  op: "LRN"
  input: "conv2/conv2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.00011111111111111112
    }
  }
  attr {
    key: "beta"
    value {
      f: 0.75
    }
  }
  attr {
    key: "bias"
    value {
      f: 1.0
    }
  }
  attr {
    key: "depth_radius"
    value {
      i: 4
    }
  }
}
node {
  name: "pool2"
  op: "MaxPool"
  input: "norm2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 3
        i: 3
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "local3/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "local3/Reshape"
  op: "Reshape"
  input: "pool2"
  input: "local3/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 4096
          }
        }
      }
    }
  }
}
node {
  name: "local3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\020\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "local3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03999999910593033
      }
    }
  }
}
node {
  name: "local3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "local3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "local3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "local3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "local3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "local3/weights/Initializer/truncated_normal"
  op: "Add"
  input: "local3/weights/Initializer/truncated_normal/mul"
  input: "local3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "local3/weights"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4096
        }
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local3/weights/Assign"
  op: "Assign"
  input: "local3/weights"
  input: "local3/weights/Initializer/truncated_normal"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local3/weights/read"
  op: "Identity"
  input: "local3/weights"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "local3/L2Loss"
  op: "L2Loss"
  input: "local3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local3/weight_loss/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.004000000189989805
      }
    }
  }
}
node {
  name: "local3/weight_loss"
  op: "Mul"
  input: "local3/L2Loss"
  input: "local3/weight_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local3/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "local3/biases"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local3/biases/Assign"
  op: "Assign"
  input: "local3/biases"
  input: "local3/biases/Initializer/Const"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local3/biases/read"
  op: "Identity"
  input: "local3/biases"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "local3/MatMul"
  op: "MatMul"
  input: "local3/Reshape"
  input: "local3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "local3/add"
  op: "Add"
  input: "local3/MatMul"
  input: "local3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "local3/local3"
  op: "Relu"
  input: "local3/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "local3/local3/local3/activations/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "local3/local3/local3/activations"
      }
    }
  }
}
node {
  name: "local3/local3/local3/activations"
  op: "HistogramSummary"
  input: "local3/local3/local3/activations/tag"
  input: "local3/local3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local3/zero_fraction/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local3/zero_fraction/Equal"
  op: "Equal"
  input: "local3/local3"
  input: "local3/zero_fraction/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "local3/zero_fraction/Cast"
  op: "Cast"
  input: "local3/zero_fraction/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "local3/zero_fraction/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "local3/zero_fraction/Mean"
  op: "Mean"
  input: "local3/zero_fraction/Cast"
  input: "local3/zero_fraction/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "local3/local3/local3/sparsity/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "local3/local3/local3/sparsity"
      }
    }
  }
}
node {
  name: "local3/local3/local3/sparsity"
  op: "ScalarSummary"
  input: "local3/local3/local3/sparsity/tags"
  input: "local3/zero_fraction/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local4/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\001\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "local4/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local4/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03999999910593033
      }
    }
  }
}
node {
  name: "local4/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "local4/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "local4/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "local4/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "local4/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "local4/weights/Initializer/truncated_normal"
  op: "Add"
  input: "local4/weights/Initializer/truncated_normal/mul"
  input: "local4/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "local4/weights"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local4/weights/Assign"
  op: "Assign"
  input: "local4/weights"
  input: "local4/weights/Initializer/truncated_normal"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local4/weights/read"
  op: "Identity"
  input: "local4/weights"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "local4/L2Loss"
  op: "L2Loss"
  input: "local4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local4/weight_loss/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.004000000189989805
      }
    }
  }
}
node {
  name: "local4/weight_loss"
  op: "Mul"
  input: "local4/L2Loss"
  input: "local4/weight_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local4/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "local4/biases"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local4/biases/Assign"
  op: "Assign"
  input: "local4/biases"
  input: "local4/biases/Initializer/Const"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local4/biases/read"
  op: "Identity"
  input: "local4/biases"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "local4/MatMul"
  op: "MatMul"
  input: "local3/local3"
  input: "local4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "local4/add"
  op: "Add"
  input: "local4/MatMul"
  input: "local4/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "local4/local4"
  op: "Relu"
  input: "local4/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "local4/local4/local4/activations/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "local4/local4/local4/activations"
      }
    }
  }
}
node {
  name: "local4/local4/local4/activations"
  op: "HistogramSummary"
  input: "local4/local4/local4/activations/tag"
  input: "local4/local4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local4/zero_fraction/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local4/zero_fraction/Equal"
  op: "Equal"
  input: "local4/local4"
  input: "local4/zero_fraction/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "local4/zero_fraction/Cast"
  op: "Cast"
  input: "local4/zero_fraction/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "local4/zero_fraction/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "local4/zero_fraction/Mean"
  op: "Mean"
  input: "local4/zero_fraction/Cast"
  input: "local4/zero_fraction/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "local4/local4/local4/sparsity/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "local4/local4/local4/sparsity"
      }
    }
  }
}
node {
  name: "local4/local4/local4/sparsity"
  op: "ScalarSummary"
  input: "local4/local4/local4/sparsity/tags"
  input: "local4/zero_fraction/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_linear/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\300\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "softmax_linear/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "softmax_linear/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0052083334885537624
      }
    }
  }
}
node {
  name: "softmax_linear/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "softmax_linear/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_linear/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "softmax_linear/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "softmax_linear/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "softmax_linear/weights/Initializer/truncated_normal"
  op: "Add"
  input: "softmax_linear/weights/Initializer/truncated_normal/mul"
  input: "softmax_linear/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "softmax_linear/weights"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "softmax_linear/weights/Assign"
  op: "Assign"
  input: "softmax_linear/weights"
  input: "softmax_linear/weights/Initializer/truncated_normal"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "softmax_linear/weights/read"
  op: "Identity"
  input: "softmax_linear/weights"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "softmax_linear/L2Loss"
  op: "L2Loss"
  input: "softmax_linear/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_linear/weight_loss/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "softmax_linear/weight_loss"
  op: "Mul"
  input: "softmax_linear/L2Loss"
  input: "softmax_linear/weight_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_linear/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "softmax_linear/biases"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "softmax_linear/biases/Assign"
  op: "Assign"
  input: "softmax_linear/biases"
  input: "softmax_linear/biases/Initializer/Const"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "softmax_linear/biases/read"
  op: "Identity"
  input: "softmax_linear/biases"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "softmax_linear/MatMul"
  op: "MatMul"
  input: "local4/local4"
  input: "softmax_linear/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "softmax_linear/softmax_linear"
  op: "Add"
  input: "softmax_linear/MatMul"
  input: "softmax_linear/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "softmax_linear/softmax_linear/softmax_linear/activations/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "softmax_linear/softmax_linear/softmax_linear/activations"
      }
    }
  }
}
node {
  name: "softmax_linear/softmax_linear/softmax_linear/activations"
  op: "HistogramSummary"
  input: "softmax_linear/softmax_linear/softmax_linear/activations/tag"
  input: "softmax_linear/softmax_linear"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_linear/zero_fraction/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "softmax_linear/zero_fraction/Equal"
  op: "Equal"
  input: "softmax_linear/softmax_linear"
  input: "softmax_linear/zero_fraction/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "softmax_linear/zero_fraction/Cast"
  op: "Cast"
  input: "softmax_linear/zero_fraction/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "softmax_linear/zero_fraction/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "softmax_linear/zero_fraction/Mean"
  op: "Mean"
  input: "softmax_linear/zero_fraction/Cast"
  input: "softmax_linear/zero_fraction/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "softmax_linear/softmax_linear/softmax_linear/sparsity/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "softmax_linear/softmax_linear/softmax_linear/sparsity"
      }
    }
  }
}
node {
  name: "softmax_linear/softmax_linear/softmax_linear/sparsity"
  op: "ScalarSummary"
  input: "softmax_linear/softmax_linear/softmax_linear/sparsity/tags"
  input: "softmax_linear/zero_fraction/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cross_entropy_per_example/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "cross_entropy_per_example/cross_entropy_per_example"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "softmax_linear/softmax_linear"
  input: "Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cross_entropy"
  op: "Mean"
  input: "cross_entropy_per_example/cross_entropy_per_example"
  input: "Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "total_loss"
  op: "AddN"
  input: "conv1/weight_loss"
  input: "conv2/weight_loss"
  input: "local3/weight_loss"
  input: "local4/weight_loss"
  input: "softmax_linear/weight_loss"
  input: "cross_entropy"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ArgMax/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax"
  op: "ArgMax"
  input: "softmax_linear/softmax_linear"
  input: "ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "ArgMax"
  input: "Reshape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Cast_4"
  op: "Cast"
  input: "Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_2"
  op: "Mean"
  input: "Cast_4"
  input: "Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialDecay/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast"
  op: "Cast"
  input: "global_step/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1367
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1"
  op: "Cast"
  input: "ExponentialDecay/Cast_1/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "ExponentialDecay/truediv"
  op: "RealDiv"
  input: "ExponentialDecay/Cast"
  input: "ExponentialDecay/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Floor"
  op: "Floor"
  input: "ExponentialDecay/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Pow"
  op: "Pow"
  input: "ExponentialDecay/Cast_2/x"
  input: "ExponentialDecay/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay"
  op: "Mul"
  input: "ExponentialDecay/learning_rate"
  input: "ExponentialDecay/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "learning_rate/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate"
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "ScalarSummary"
  input: "learning_rate/tags"
  input: "ExponentialDecay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv1/weight_loss/avg/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1/weight_loss/avg"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1/weight_loss/avg/Assign"
  op: "Assign"
  input: "conv1/weight_loss/avg"
  input: "conv1/weight_loss/avg/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/weight_loss/avg/read"
  op: "Identity"
  input: "conv1/weight_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv2/weight_loss/avg/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2/weight_loss/avg"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2/weight_loss/avg/Assign"
  op: "Assign"
  input: "conv2/weight_loss/avg"
  input: "conv2/weight_loss/avg/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/weight_loss/avg/read"
  op: "Identity"
  input: "conv2/weight_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local3/weight_loss/avg/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local3/weight_loss/avg"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local3/weight_loss/avg/Assign"
  op: "Assign"
  input: "local3/weight_loss/avg"
  input: "local3/weight_loss/avg/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local3/weight_loss/avg/read"
  op: "Identity"
  input: "local3/weight_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local4/weight_loss/avg/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local4/weight_loss/avg"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local4/weight_loss/avg/Assign"
  op: "Assign"
  input: "local4/weight_loss/avg"
  input: "local4/weight_loss/avg/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local4/weight_loss/avg/read"
  op: "Identity"
  input: "local4/weight_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_linear/weight_loss/avg/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "softmax_linear/weight_loss/avg"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "softmax_linear/weight_loss/avg/Assign"
  op: "Assign"
  input: "softmax_linear/weight_loss/avg"
  input: "softmax_linear/weight_loss/avg/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "softmax_linear/weight_loss/avg/read"
  op: "Identity"
  input: "softmax_linear/weight_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cross_entropy/avg/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cross_entropy/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cross_entropy/avg"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cross_entropy/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "cross_entropy/avg/Assign"
  op: "Assign"
  input: "cross_entropy/avg"
  input: "cross_entropy/avg/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cross_entropy/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "cross_entropy/avg/read"
  op: "Identity"
  input: "cross_entropy/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cross_entropy/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "total_loss/avg/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "total_loss/avg"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "total_loss/avg/Assign"
  op: "Assign"
  input: "total_loss/avg"
  input: "total_loss/avg/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "total_loss/avg/read"
  op: "Identity"
  input: "total_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/decay"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "conv1/weight_loss/avg/read"
  input: "conv1/weight_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg/sub_1"
  input: "avg/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg"
  op: "AssignSub"
  input: "conv1/weight_loss/avg"
  input: "avg/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg_1/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "conv2/weight_loss/avg/read"
  input: "conv2/weight_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg_1/sub_1"
  input: "avg/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_1"
  op: "AssignSub"
  input: "conv2/weight_loss/avg"
  input: "avg/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg/AssignMovingAvg_2/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_2/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg_2/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_2/sub_1"
  op: "Sub"
  input: "local3/weight_loss/avg/read"
  input: "local3/weight_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_2/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg_2/sub_1"
  input: "avg/AssignMovingAvg_2/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_2"
  op: "AssignSub"
  input: "local3/weight_loss/avg"
  input: "avg/AssignMovingAvg_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg/AssignMovingAvg_3/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_3/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg_3/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_3/sub_1"
  op: "Sub"
  input: "local4/weight_loss/avg/read"
  input: "local4/weight_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_3/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg_3/sub_1"
  input: "avg/AssignMovingAvg_3/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_3"
  op: "AssignSub"
  input: "local4/weight_loss/avg"
  input: "avg/AssignMovingAvg_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg/AssignMovingAvg_4/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_4/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg_4/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_4/sub_1"
  op: "Sub"
  input: "softmax_linear/weight_loss/avg/read"
  input: "softmax_linear/weight_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_4/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg_4/sub_1"
  input: "avg/AssignMovingAvg_4/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_4"
  op: "AssignSub"
  input: "softmax_linear/weight_loss/avg"
  input: "avg/AssignMovingAvg_4/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg/AssignMovingAvg_5/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cross_entropy/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_5/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg_5/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cross_entropy/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_5/sub_1"
  op: "Sub"
  input: "cross_entropy/avg/read"
  input: "cross_entropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cross_entropy/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_5/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg_5/sub_1"
  input: "avg/AssignMovingAvg_5/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cross_entropy/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_5"
  op: "AssignSub"
  input: "cross_entropy/avg"
  input: "avg/AssignMovingAvg_5/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cross_entropy/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg/AssignMovingAvg_6/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_6/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg_6/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_6/sub_1"
  op: "Sub"
  input: "total_loss/avg/read"
  input: "total_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_6/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg_6/sub_1"
  input: "avg/AssignMovingAvg_6/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg_6"
  op: "AssignSub"
  input: "total_loss/avg"
  input: "avg/AssignMovingAvg_6/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg"
  op: "NoOp"
  input: "^avg/AssignMovingAvg"
  input: "^avg/AssignMovingAvg_1"
  input: "^avg/AssignMovingAvg_2"
  input: "^avg/AssignMovingAvg_3"
  input: "^avg/AssignMovingAvg_4"
  input: "^avg/AssignMovingAvg_5"
  input: "^avg/AssignMovingAvg_6"
}
node {
  name: "conv1/weight_loss__raw_/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv1/weight_loss__raw_"
      }
    }
  }
}
node {
  name: "conv1/weight_loss__raw_"
  op: "ScalarSummary"
  input: "conv1/weight_loss__raw_/tags"
  input: "conv1/weight_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv1/weight_loss_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv1/weight_loss_1"
      }
    }
  }
}
node {
  name: "conv1/weight_loss_1"
  op: "ScalarSummary"
  input: "conv1/weight_loss_1/tags"
  input: "conv1/weight_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv2/weight_loss__raw_/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv2/weight_loss__raw_"
      }
    }
  }
}
node {
  name: "conv2/weight_loss__raw_"
  op: "ScalarSummary"
  input: "conv2/weight_loss__raw_/tags"
  input: "conv2/weight_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv2/weight_loss_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv2/weight_loss_1"
      }
    }
  }
}
node {
  name: "conv2/weight_loss_1"
  op: "ScalarSummary"
  input: "conv2/weight_loss_1/tags"
  input: "conv2/weight_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local3/weight_loss__raw_/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "local3/weight_loss__raw_"
      }
    }
  }
}
node {
  name: "local3/weight_loss__raw_"
  op: "ScalarSummary"
  input: "local3/weight_loss__raw_/tags"
  input: "local3/weight_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local3/weight_loss_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "local3/weight_loss_1"
      }
    }
  }
}
node {
  name: "local3/weight_loss_1"
  op: "ScalarSummary"
  input: "local3/weight_loss_1/tags"
  input: "local3/weight_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local4/weight_loss__raw_/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "local4/weight_loss__raw_"
      }
    }
  }
}
node {
  name: "local4/weight_loss__raw_"
  op: "ScalarSummary"
  input: "local4/weight_loss__raw_/tags"
  input: "local4/weight_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local4/weight_loss_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "local4/weight_loss_1"
      }
    }
  }
}
node {
  name: "local4/weight_loss_1"
  op: "ScalarSummary"
  input: "local4/weight_loss_1/tags"
  input: "local4/weight_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_linear/weight_loss__raw_/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "softmax_linear/weight_loss__raw_"
      }
    }
  }
}
node {
  name: "softmax_linear/weight_loss__raw_"
  op: "ScalarSummary"
  input: "softmax_linear/weight_loss__raw_/tags"
  input: "softmax_linear/weight_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_linear/weight_loss_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "softmax_linear/weight_loss_1"
      }
    }
  }
}
node {
  name: "softmax_linear/weight_loss_1"
  op: "ScalarSummary"
  input: "softmax_linear/weight_loss_1/tags"
  input: "softmax_linear/weight_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cross_entropy__raw_/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "cross_entropy__raw_"
      }
    }
  }
}
node {
  name: "cross_entropy__raw_"
  op: "ScalarSummary"
  input: "cross_entropy__raw_/tags"
  input: "cross_entropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cross_entropy_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "cross_entropy_1"
      }
    }
  }
}
node {
  name: "cross_entropy_1"
  op: "ScalarSummary"
  input: "cross_entropy_1/tags"
  input: "cross_entropy/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "total_loss__raw_/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "total_loss__raw_"
      }
    }
  }
}
node {
  name: "total_loss__raw_"
  op: "ScalarSummary"
  input: "total_loss__raw_/tags"
  input: "total_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "total_loss_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "total_loss_1"
      }
    }
  }
}
node {
  name: "total_loss_1"
  op: "ScalarSummary"
  input: "total_loss_1/tags"
  input: "total_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Fill"
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_5"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/conv1/weight_loss_grad/Shape"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1/weight_loss_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1/weight_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/conv1/weight_loss_grad/Shape"
  input: "gradients/conv1/weight_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1/weight_loss_grad/mul"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency"
  input: "conv1/weight_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/conv1/weight_loss_grad/Sum"
  op: "Sum"
  input: "gradients/conv1/weight_loss_grad/mul"
  input: "gradients/conv1/weight_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/conv1/weight_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/conv1/weight_loss_grad/Sum"
  input: "gradients/conv1/weight_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/conv1/weight_loss_grad/mul_1"
  op: "Mul"
  input: "conv1/L2Loss"
  input: "gradients/total_loss_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/conv1/weight_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/conv1/weight_loss_grad/mul_1"
  input: "gradients/conv1/weight_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/conv1/weight_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/conv1/weight_loss_grad/Sum_1"
  input: "gradients/conv1/weight_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/conv1/weight_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/conv1/weight_loss_grad/Reshape"
  input: "^gradients/conv1/weight_loss_grad/Reshape_1"
}
node {
  name: "gradients/conv1/weight_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv1/weight_loss_grad/Reshape"
  input: "^gradients/conv1/weight_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1/weight_loss_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/conv1/weight_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv1/weight_loss_grad/Reshape_1"
  input: "^gradients/conv1/weight_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1/weight_loss_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/conv2/weight_loss_grad/Shape"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2/weight_loss_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2/weight_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/conv2/weight_loss_grad/Shape"
  input: "gradients/conv2/weight_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2/weight_loss_grad/mul"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_1"
  input: "conv2/weight_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/conv2/weight_loss_grad/Sum"
  op: "Sum"
  input: "gradients/conv2/weight_loss_grad/mul"
  input: "gradients/conv2/weight_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/conv2/weight_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/conv2/weight_loss_grad/Sum"
  input: "gradients/conv2/weight_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/conv2/weight_loss_grad/mul_1"
  op: "Mul"
  input: "conv2/L2Loss"
  input: "gradients/total_loss_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/conv2/weight_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/conv2/weight_loss_grad/mul_1"
  input: "gradients/conv2/weight_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/conv2/weight_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/conv2/weight_loss_grad/Sum_1"
  input: "gradients/conv2/weight_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/conv2/weight_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/conv2/weight_loss_grad/Reshape"
  input: "^gradients/conv2/weight_loss_grad/Reshape_1"
}
node {
  name: "gradients/conv2/weight_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2/weight_loss_grad/Reshape"
  input: "^gradients/conv2/weight_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2/weight_loss_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/conv2/weight_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2/weight_loss_grad/Reshape_1"
  input: "^gradients/conv2/weight_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2/weight_loss_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local3/weight_loss_grad/Shape"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local3/weight_loss_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local3/weight_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local3/weight_loss_grad/Shape"
  input: "gradients/local3/weight_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local3/weight_loss_grad/mul"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_2"
  input: "local3/weight_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local3/weight_loss_grad/Sum"
  op: "Sum"
  input: "gradients/local3/weight_loss_grad/mul"
  input: "gradients/local3/weight_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local3/weight_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/local3/weight_loss_grad/Sum"
  input: "gradients/local3/weight_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local3/weight_loss_grad/mul_1"
  op: "Mul"
  input: "local3/L2Loss"
  input: "gradients/total_loss_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local3/weight_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/local3/weight_loss_grad/mul_1"
  input: "gradients/local3/weight_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local3/weight_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local3/weight_loss_grad/Sum_1"
  input: "gradients/local3/weight_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local3/weight_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/local3/weight_loss_grad/Reshape"
  input: "^gradients/local3/weight_loss_grad/Reshape_1"
}
node {
  name: "gradients/local3/weight_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/local3/weight_loss_grad/Reshape"
  input: "^gradients/local3/weight_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local3/weight_loss_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local3/weight_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/local3/weight_loss_grad/Reshape_1"
  input: "^gradients/local3/weight_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local3/weight_loss_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local4/weight_loss_grad/Shape"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local4/weight_loss_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local4/weight_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local4/weight_loss_grad/Shape"
  input: "gradients/local4/weight_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local4/weight_loss_grad/mul"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_3"
  input: "local4/weight_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local4/weight_loss_grad/Sum"
  op: "Sum"
  input: "gradients/local4/weight_loss_grad/mul"
  input: "gradients/local4/weight_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local4/weight_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/local4/weight_loss_grad/Sum"
  input: "gradients/local4/weight_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local4/weight_loss_grad/mul_1"
  op: "Mul"
  input: "local4/L2Loss"
  input: "gradients/total_loss_grad/tuple/control_dependency_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local4/weight_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/local4/weight_loss_grad/mul_1"
  input: "gradients/local4/weight_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local4/weight_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local4/weight_loss_grad/Sum_1"
  input: "gradients/local4/weight_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local4/weight_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/local4/weight_loss_grad/Reshape"
  input: "^gradients/local4/weight_loss_grad/Reshape_1"
}
node {
  name: "gradients/local4/weight_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/local4/weight_loss_grad/Reshape"
  input: "^gradients/local4/weight_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local4/weight_loss_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local4/weight_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/local4/weight_loss_grad/Reshape_1"
  input: "^gradients/local4/weight_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local4/weight_loss_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/weight_loss_grad/Shape"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/weight_loss_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/weight_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/softmax_linear/weight_loss_grad/Shape"
  input: "gradients/softmax_linear/weight_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/weight_loss_grad/mul"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_4"
  input: "softmax_linear/weight_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/weight_loss_grad/Sum"
  op: "Sum"
  input: "gradients/softmax_linear/weight_loss_grad/mul"
  input: "gradients/softmax_linear/weight_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_linear/weight_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/softmax_linear/weight_loss_grad/Sum"
  input: "gradients/softmax_linear/weight_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/weight_loss_grad/mul_1"
  op: "Mul"
  input: "softmax_linear/L2Loss"
  input: "gradients/total_loss_grad/tuple/control_dependency_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/weight_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/softmax_linear/weight_loss_grad/mul_1"
  input: "gradients/softmax_linear/weight_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_linear/weight_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/softmax_linear/weight_loss_grad/Sum_1"
  input: "gradients/softmax_linear/weight_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/weight_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/softmax_linear/weight_loss_grad/Reshape"
  input: "^gradients/softmax_linear/weight_loss_grad/Reshape_1"
}
node {
  name: "gradients/softmax_linear/weight_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/softmax_linear/weight_loss_grad/Reshape"
  input: "^gradients/softmax_linear/weight_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_linear/weight_loss_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/weight_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/softmax_linear/weight_loss_grad/Reshape_1"
  input: "^gradients/softmax_linear/weight_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_linear/weight_loss_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cross_entropy_grad/Reshape/shape"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cross_entropy_grad/Reshape"
  op: "Reshape"
  input: "gradients/total_loss_grad/tuple/control_dependency_5"
  input: "gradients/cross_entropy_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cross_entropy_grad/Tile/multiples"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "gradients/cross_entropy_grad/Tile"
  op: "Tile"
  input: "gradients/cross_entropy_grad/Reshape"
  input: "gradients/cross_entropy_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cross_entropy_grad/Shape"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "gradients/cross_entropy_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cross_entropy_grad/Const"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cross_entropy_grad/Prod"
  op: "Prod"
  input: "gradients/cross_entropy_grad/Shape"
  input: "gradients/cross_entropy_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cross_entropy_grad/Const_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cross_entropy_grad/Prod_1"
  op: "Prod"
  input: "gradients/cross_entropy_grad/Shape_1"
  input: "gradients/cross_entropy_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cross_entropy_grad/Maximum/y"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cross_entropy_grad/Maximum"
  op: "Maximum"
  input: "gradients/cross_entropy_grad/Prod_1"
  input: "gradients/cross_entropy_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cross_entropy_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/cross_entropy_grad/Prod"
  input: "gradients/cross_entropy_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cross_entropy_grad/Cast"
  op: "Cast"
  input: "gradients/cross_entropy_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cross_entropy_grad/truediv"
  op: "RealDiv"
  input: "gradients/cross_entropy_grad/Tile"
  input: "gradients/cross_entropy_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1/L2Loss_grad/mul"
  op: "Mul"
  input: "conv1/weights/read"
  input: "gradients/conv1/weight_loss_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2/L2Loss_grad/mul"
  op: "Mul"
  input: "conv2/weights/read"
  input: "gradients/conv2/weight_loss_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local3/L2Loss_grad/mul"
  op: "Mul"
  input: "local3/weights/read"
  input: "gradients/local3/weight_loss_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local4/L2Loss_grad/mul"
  op: "Mul"
  input: "local4/weights/read"
  input: "gradients/local4/weight_loss_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/L2Loss_grad/mul"
  op: "Mul"
  input: "softmax_linear/weights/read"
  input: "gradients/softmax_linear/weight_loss_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 6
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/cross_entropy_per_example/cross_entropy_per_example_grad/PreventGradient"
  op: "PreventGradient"
  input: "cross_entropy_per_example/cross_entropy_per_example:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "message"
    value {
      s: "Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation\'s interaction with tf.gradients()"
    }
  }
}
node {
  name: "gradients/cross_entropy_per_example/cross_entropy_per_example_grad/ExpandDims/dim"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cross_entropy_per_example/cross_entropy_per_example_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/cross_entropy_grad/truediv"
  input: "gradients/cross_entropy_per_example/cross_entropy_per_example_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cross_entropy_per_example/cross_entropy_per_example_grad/mul"
  op: "Mul"
  input: "gradients/cross_entropy_per_example/cross_entropy_per_example_grad/ExpandDims"
  input: "gradients/cross_entropy_per_example/cross_entropy_per_example_grad/PreventGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/softmax_linear_grad/Shape"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/softmax_linear_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/softmax_linear_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/softmax_linear/softmax_linear_grad/Shape"
  input: "gradients/softmax_linear/softmax_linear_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/softmax_linear_grad/Sum"
  op: "Sum"
  input: "gradients/cross_entropy_per_example/cross_entropy_per_example_grad/mul"
  input: "gradients/softmax_linear/softmax_linear_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_linear/softmax_linear_grad/Reshape"
  op: "Reshape"
  input: "gradients/softmax_linear/softmax_linear_grad/Sum"
  input: "gradients/softmax_linear/softmax_linear_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/softmax_linear_grad/Sum_1"
  op: "Sum"
  input: "gradients/cross_entropy_per_example/cross_entropy_per_example_grad/mul"
  input: "gradients/softmax_linear/softmax_linear_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_linear/softmax_linear_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/softmax_linear/softmax_linear_grad/Sum_1"
  input: "gradients/softmax_linear/softmax_linear_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/softmax_linear_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/softmax_linear/softmax_linear_grad/Reshape"
  input: "^gradients/softmax_linear/softmax_linear_grad/Reshape_1"
}
node {
  name: "gradients/softmax_linear/softmax_linear_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/softmax_linear/softmax_linear_grad/Reshape"
  input: "^gradients/softmax_linear/softmax_linear_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_linear/softmax_linear_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/softmax_linear_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/softmax_linear/softmax_linear_grad/Reshape_1"
  input: "^gradients/softmax_linear/softmax_linear_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_linear/softmax_linear_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/softmax_linear/softmax_linear_grad/tuple/control_dependency"
  input: "softmax_linear/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/softmax_linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "local4/local4"
  input: "gradients/softmax_linear/softmax_linear_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_linear/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/softmax_linear/MatMul_grad/MatMul"
  input: "^gradients/softmax_linear/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/softmax_linear/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/softmax_linear/MatMul_grad/MatMul"
  input: "^gradients/softmax_linear/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_linear/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_linear/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/softmax_linear/MatMul_grad/MatMul_1"
  input: "^gradients/softmax_linear/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local4/local4_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/softmax_linear/MatMul_grad/tuple/control_dependency"
  input: "local4/local4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/softmax_linear/L2Loss_grad/mul"
  input: "gradients/softmax_linear/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_linear/L2Loss_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local4/add_grad/Shape"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/local4/add_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "gradients/local4/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local4/add_grad/Shape"
  input: "gradients/local4/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local4/add_grad/Sum"
  op: "Sum"
  input: "gradients/local4/local4_grad/ReluGrad"
  input: "gradients/local4/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local4/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/local4/add_grad/Sum"
  input: "gradients/local4/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local4/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/local4/local4_grad/ReluGrad"
  input: "gradients/local4/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local4/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local4/add_grad/Sum_1"
  input: "gradients/local4/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local4/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/local4/add_grad/Reshape"
  input: "^gradients/local4/add_grad/Reshape_1"
}
node {
  name: "gradients/local4/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/local4/add_grad/Reshape"
  input: "^gradients/local4/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local4/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local4/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/local4/add_grad/Reshape_1"
  input: "^gradients/local4/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local4/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local4/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/local4/add_grad/tuple/control_dependency"
  input: "local4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local4/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "local3/local3"
  input: "gradients/local4/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local4/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/local4/MatMul_grad/MatMul"
  input: "^gradients/local4/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/local4/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/local4/MatMul_grad/MatMul"
  input: "^gradients/local4/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local4/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local4/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/local4/MatMul_grad/MatMul_1"
  input: "^gradients/local4/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local4/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local3/local3_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/local4/MatMul_grad/tuple/control_dependency"
  input: "local3/local3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/local4/L2Loss_grad/mul"
  input: "gradients/local4/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local4/L2Loss_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local3/add_grad/Shape"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/local3/add_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "gradients/local3/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local3/add_grad/Shape"
  input: "gradients/local3/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local3/add_grad/Sum"
  op: "Sum"
  input: "gradients/local3/local3_grad/ReluGrad"
  input: "gradients/local3/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local3/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/local3/add_grad/Sum"
  input: "gradients/local3/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local3/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/local3/local3_grad/ReluGrad"
  input: "gradients/local3/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local3/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local3/add_grad/Sum_1"
  input: "gradients/local3/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local3/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/local3/add_grad/Reshape"
  input: "^gradients/local3/add_grad/Reshape_1"
}
node {
  name: "gradients/local3/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/local3/add_grad/Reshape"
  input: "^gradients/local3/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local3/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local3/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/local3/add_grad/Reshape_1"
  input: "^gradients/local3/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local3/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local3/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/local3/add_grad/tuple/control_dependency"
  input: "local3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 4096
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local3/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "local3/Reshape"
  input: "gradients/local3/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local3/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/local3/MatMul_grad/MatMul"
  input: "^gradients/local3/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/local3/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/local3/MatMul_grad/MatMul"
  input: "^gradients/local3/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local3/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 4096
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local3/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/local3/MatMul_grad/MatMul_1"
  input: "^gradients/local3/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local3/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local3/Reshape_grad/Shape"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\200\000\000\000\010\000\000\000\010\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/local3/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/local3/MatMul_grad/tuple/control_dependency"
  input: "gradients/local3/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/local3/L2Loss_grad/mul"
  input: "gradients/local3/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local3/L2Loss_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "gradients/pool2_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "norm2"
  input: "pool2"
  input: "gradients/local3/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 3
        i: 3
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/norm2_grad/LRNGrad"
  op: "LRNGrad"
  input: "gradients/pool2_grad/MaxPoolGrad"
  input: "conv2/conv2"
  input: "norm2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.00011111111111111112
    }
  }
  attr {
    key: "beta"
    value {
      f: 0.75
    }
  }
  attr {
    key: "bias"
    value {
      f: 1.0
    }
  }
  attr {
    key: "depth_radius"
    value {
      i: 4
    }
  }
}
node {
  name: "gradients/conv2/conv2_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/norm2_grad/LRNGrad"
  input: "conv2/conv2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/conv2/conv2_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/conv2/conv2_grad/ReluGrad"
  input: "^gradients/conv2/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/conv2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2/conv2_grad/ReluGrad"
  input: "^gradients/conv2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2/conv2_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2/Conv2D_grad/Shape"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\200\000\000\000\020\000\000\000\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/conv2/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2/Conv2D_grad/Shape"
  input: "conv2/weights/read"
  input: "gradients/conv2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2/Conv2D_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/conv2/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "norm1"
  input: "gradients/conv2/Conv2D_grad/Shape_1"
  input: "gradients/conv2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/conv2/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/conv2/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/norm1_grad/LRNGrad"
  op: "LRNGrad"
  input: "gradients/conv2/Conv2D_grad/tuple/control_dependency"
  input: "pool1"
  input: "norm1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.00011111111111111112
    }
  }
  attr {
    key: "beta"
    value {
      f: 0.75
    }
  }
  attr {
    key: "bias"
    value {
      f: 1.0
    }
  }
  attr {
    key: "depth_radius"
    value {
      i: 4
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/conv2/L2Loss_grad/mul"
  input: "gradients/conv2/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2/L2Loss_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/pool1_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "conv1/conv1"
  input: "pool1"
  input: "gradients/norm1_grad/LRNGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 3
        i: 3
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/conv1/conv1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/pool1_grad/MaxPoolGrad"
  input: "conv1/conv1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/conv1/conv1_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/conv1/conv1_grad/ReluGrad"
  input: "^gradients/conv1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/conv1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv1/conv1_grad/ReluGrad"
  input: "^gradients/conv1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1/conv1_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1/Conv2D_grad/Shape"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\200\000\000\000 \000\000\000 \000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/conv1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv1/Conv2D_grad/Shape"
  input: "conv1/weights/read"
  input: "gradients/conv1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv1/Conv2D_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/conv1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "shuffle_batch"
  input: "gradients/conv1/Conv2D_grad/Shape_1"
  input: "gradients/conv1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/conv1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv1/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/conv1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/conv1/L2Loss_grad/mul"
  input: "gradients/conv1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1/L2Loss_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "GradientDescent/update_conv1/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv1/weights"
  input: "ExponentialDecay"
  input: "gradients/AddN_4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_conv1/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv1/biases"
  input: "ExponentialDecay"
  input: "gradients/conv1/BiasAdd_grad/tuple/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_conv2/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv2/weights"
  input: "ExponentialDecay"
  input: "gradients/AddN_3"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_conv2/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv2/biases"
  input: "ExponentialDecay"
  input: "gradients/conv2/BiasAdd_grad/tuple/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_local3/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "local3/weights"
  input: "ExponentialDecay"
  input: "gradients/AddN_2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_local3/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "local3/biases"
  input: "ExponentialDecay"
  input: "gradients/local3/add_grad/tuple/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_local4/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "local4/weights"
  input: "ExponentialDecay"
  input: "gradients/AddN_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_local4/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "local4/biases"
  input: "ExponentialDecay"
  input: "gradients/local4/add_grad/tuple/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_softmax_linear/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "softmax_linear/weights"
  input: "ExponentialDecay"
  input: "gradients/AddN"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_softmax_linear/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "softmax_linear/biases"
  input: "ExponentialDecay"
  input: "gradients/softmax_linear/softmax_linear_grad/tuple/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update"
  op: "NoOp"
  input: "^GradientDescent/update_conv1/weights/ApplyGradientDescent"
  input: "^GradientDescent/update_conv1/biases/ApplyGradientDescent"
  input: "^GradientDescent/update_conv2/weights/ApplyGradientDescent"
  input: "^GradientDescent/update_conv2/biases/ApplyGradientDescent"
  input: "^GradientDescent/update_local3/weights/ApplyGradientDescent"
  input: "^GradientDescent/update_local3/biases/ApplyGradientDescent"
  input: "^GradientDescent/update_local4/weights/ApplyGradientDescent"
  input: "^GradientDescent/update_local4/biases/ApplyGradientDescent"
  input: "^GradientDescent/update_softmax_linear/weights/ApplyGradientDescent"
  input: "^GradientDescent/update_softmax_linear/biases/ApplyGradientDescent"
  device: "/device:CPU:0"
}
node {
  name: "GradientDescent/value"
  op: "Const"
  input: "^GradientDescent/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "GradientDescent"
  op: "AssignAdd"
  input: "global_step"
  input: "GradientDescent/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "conv1/weights_1/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv1/weights_1"
      }
    }
  }
}
node {
  name: "conv1/weights_1"
  op: "HistogramSummary"
  input: "conv1/weights_1/tag"
  input: "conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv1/biases_1/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv1/biases_1"
      }
    }
  }
}
node {
  name: "conv1/biases_1"
  op: "HistogramSummary"
  input: "conv1/biases_1/tag"
  input: "conv1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv2/weights_1/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv2/weights_1"
      }
    }
  }
}
node {
  name: "conv2/weights_1"
  op: "HistogramSummary"
  input: "conv2/weights_1/tag"
  input: "conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv2/biases_1/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv2/biases_1"
      }
    }
  }
}
node {
  name: "conv2/biases_1"
  op: "HistogramSummary"
  input: "conv2/biases_1/tag"
  input: "conv2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local3/weights_1/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "local3/weights_1"
      }
    }
  }
}
node {
  name: "local3/weights_1"
  op: "HistogramSummary"
  input: "local3/weights_1/tag"
  input: "local3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local3/biases_1/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "local3/biases_1"
      }
    }
  }
}
node {
  name: "local3/biases_1"
  op: "HistogramSummary"
  input: "local3/biases_1/tag"
  input: "local3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local4/weights_1/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "local4/weights_1"
      }
    }
  }
}
node {
  name: "local4/weights_1"
  op: "HistogramSummary"
  input: "local4/weights_1/tag"
  input: "local4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local4/biases_1/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "local4/biases_1"
      }
    }
  }
}
node {
  name: "local4/biases_1"
  op: "HistogramSummary"
  input: "local4/biases_1/tag"
  input: "local4/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_linear/weights_1/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "softmax_linear/weights_1"
      }
    }
  }
}
node {
  name: "softmax_linear/weights_1"
  op: "HistogramSummary"
  input: "softmax_linear/weights_1/tag"
  input: "softmax_linear/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_linear/biases_1/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "softmax_linear/biases_1"
      }
    }
  }
}
node {
  name: "softmax_linear/biases_1"
  op: "HistogramSummary"
  input: "softmax_linear/biases_1/tag"
  input: "softmax_linear/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv1/weights/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv1/weights/gradients"
      }
    }
  }
}
node {
  name: "conv1/weights/gradients"
  op: "HistogramSummary"
  input: "conv1/weights/gradients/tag"
  input: "gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv1/biases/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv1/biases/gradients"
      }
    }
  }
}
node {
  name: "conv1/biases/gradients"
  op: "HistogramSummary"
  input: "conv1/biases/gradients/tag"
  input: "gradients/conv1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv2/weights/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv2/weights/gradients"
      }
    }
  }
}
node {
  name: "conv2/weights/gradients"
  op: "HistogramSummary"
  input: "conv2/weights/gradients/tag"
  input: "gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv2/biases/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv2/biases/gradients"
      }
    }
  }
}
node {
  name: "conv2/biases/gradients"
  op: "HistogramSummary"
  input: "conv2/biases/gradients/tag"
  input: "gradients/conv2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local3/weights/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "local3/weights/gradients"
      }
    }
  }
}
node {
  name: "local3/weights/gradients"
  op: "HistogramSummary"
  input: "local3/weights/gradients/tag"
  input: "gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local3/biases/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "local3/biases/gradients"
      }
    }
  }
}
node {
  name: "local3/biases/gradients"
  op: "HistogramSummary"
  input: "local3/biases/gradients/tag"
  input: "gradients/local3/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local4/weights/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "local4/weights/gradients"
      }
    }
  }
}
node {
  name: "local4/weights/gradients"
  op: "HistogramSummary"
  input: "local4/weights/gradients/tag"
  input: "gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local4/biases/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "local4/biases/gradients"
      }
    }
  }
}
node {
  name: "local4/biases/gradients"
  op: "HistogramSummary"
  input: "local4/biases/gradients/tag"
  input: "gradients/local4/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_linear/weights/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "softmax_linear/weights/gradients"
      }
    }
  }
}
node {
  name: "softmax_linear/weights/gradients"
  op: "HistogramSummary"
  input: "softmax_linear/weights/gradients/tag"
  input: "gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_linear/biases/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "softmax_linear/biases/gradients"
      }
    }
  }
}
node {
  name: "softmax_linear/biases/gradients"
  op: "HistogramSummary"
  input: "softmax_linear/biases/gradients/tag"
  input: "gradients/softmax_linear/softmax_linear_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "conv1/weights"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_1/Switch"
  op: "Switch"
  input: "IsVariableInitialized"
  input: "IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/switch_t"
  op: "Identity"
  input: "cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/switch_f"
  op: "Identity"
  input: "cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/pred_id"
  op: "Identity"
  input: "IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/read/Switch"
  op: "RefSwitch"
  input: "conv1/weights"
  input: "cond_1/pred_id"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/read"
  op: "Identity"
  input: "cond_1/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Switch_1"
  op: "Switch"
  input: "conv1/weights/Initializer/truncated_normal"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Merge"
  op: "Merge"
  input: "cond_1/Switch_1"
  input: "cond_1/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "conv1/weights/ExponentialMovingAverage"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "conv1/weights/ExponentialMovingAverage"
  input: "cond_1/Merge"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "conv1/weights/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "conv1/biases"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_2/Switch"
  op: "Switch"
  input: "IsVariableInitialized_1"
  input: "IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/switch_t"
  op: "Identity"
  input: "cond_2/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/switch_f"
  op: "Identity"
  input: "cond_2/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/read/Switch"
  op: "RefSwitch"
  input: "conv1/biases"
  input: "cond_2/pred_id"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/read"
  op: "Identity"
  input: "cond_2/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/Switch_1"
  op: "Switch"
  input: "conv1/biases/Initializer/Const"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge"
  op: "Merge"
  input: "cond_2/Switch_1"
  input: "cond_2/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "conv1/biases/ExponentialMovingAverage"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1/biases/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "conv1/biases/ExponentialMovingAverage"
  input: "cond_2/Merge"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/biases/ExponentialMovingAverage/read"
  op: "Identity"
  input: "conv1/biases/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "conv2/weights"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_3/Switch"
  op: "Switch"
  input: "IsVariableInitialized_2"
  input: "IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_3/switch_t"
  op: "Identity"
  input: "cond_3/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_3/switch_f"
  op: "Identity"
  input: "cond_3/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_3/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_3/read/Switch"
  op: "RefSwitch"
  input: "conv2/weights"
  input: "cond_3/pred_id"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "cond_3/read"
  op: "Identity"
  input: "cond_3/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "cond_3/Switch_1"
  op: "Switch"
  input: "conv2/weights/Initializer/truncated_normal"
  input: "cond_3/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "cond_3/Merge"
  op: "Merge"
  input: "cond_3/Switch_1"
  input: "cond_3/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "conv2/weights/ExponentialMovingAverage"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "conv2/weights/ExponentialMovingAverage"
  input: "cond_3/Merge"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "conv2/weights/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "conv2/biases"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_4/Switch"
  op: "Switch"
  input: "IsVariableInitialized_3"
  input: "IsVariableInitialized_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_4/switch_t"
  op: "Identity"
  input: "cond_4/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_4/switch_f"
  op: "Identity"
  input: "cond_4/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_4/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_4/read/Switch"
  op: "RefSwitch"
  input: "conv2/biases"
  input: "cond_4/pred_id"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "cond_4/read"
  op: "Identity"
  input: "cond_4/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "cond_4/Switch_1"
  op: "Switch"
  input: "conv2/biases/Initializer/Const"
  input: "cond_4/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "cond_4/Merge"
  op: "Merge"
  input: "cond_4/Switch_1"
  input: "cond_4/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "conv2/biases/ExponentialMovingAverage"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2/biases/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "conv2/biases/ExponentialMovingAverage"
  input: "cond_4/Merge"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/biases/ExponentialMovingAverage/read"
  op: "Identity"
  input: "conv2/biases/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "local3/weights"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_5/Switch"
  op: "Switch"
  input: "IsVariableInitialized_4"
  input: "IsVariableInitialized_4"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_5/switch_t"
  op: "Identity"
  input: "cond_5/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_5/switch_f"
  op: "Identity"
  input: "cond_5/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_5/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_4"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_5/read/Switch"
  op: "RefSwitch"
  input: "local3/weights"
  input: "cond_5/pred_id"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "cond_5/read"
  op: "Identity"
  input: "cond_5/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "cond_5/Switch_1"
  op: "Switch"
  input: "local3/weights/Initializer/truncated_normal"
  input: "cond_5/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "cond_5/Merge"
  op: "Merge"
  input: "cond_5/Switch_1"
  input: "cond_5/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "local3/weights/ExponentialMovingAverage"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4096
        }
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local3/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "local3/weights/ExponentialMovingAverage"
  input: "cond_5/Merge"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local3/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "local3/weights/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "local3/biases"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_6/Switch"
  op: "Switch"
  input: "IsVariableInitialized_5"
  input: "IsVariableInitialized_5"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_6/switch_t"
  op: "Identity"
  input: "cond_6/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_6/switch_f"
  op: "Identity"
  input: "cond_6/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_6/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_5"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_6/read/Switch"
  op: "RefSwitch"
  input: "local3/biases"
  input: "cond_6/pred_id"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "cond_6/read"
  op: "Identity"
  input: "cond_6/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "cond_6/Switch_1"
  op: "Switch"
  input: "local3/biases/Initializer/Const"
  input: "cond_6/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "cond_6/Merge"
  op: "Merge"
  input: "cond_6/Switch_1"
  input: "cond_6/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "local3/biases/ExponentialMovingAverage"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local3/biases/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "local3/biases/ExponentialMovingAverage"
  input: "cond_6/Merge"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local3/biases/ExponentialMovingAverage/read"
  op: "Identity"
  input: "local3/biases/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "local4/weights"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_7/Switch"
  op: "Switch"
  input: "IsVariableInitialized_6"
  input: "IsVariableInitialized_6"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_7/switch_t"
  op: "Identity"
  input: "cond_7/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_7/switch_f"
  op: "Identity"
  input: "cond_7/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_7/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_6"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_7/read/Switch"
  op: "RefSwitch"
  input: "local4/weights"
  input: "cond_7/pred_id"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "cond_7/read"
  op: "Identity"
  input: "cond_7/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "cond_7/Switch_1"
  op: "Switch"
  input: "local4/weights/Initializer/truncated_normal"
  input: "cond_7/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "cond_7/Merge"
  op: "Merge"
  input: "cond_7/Switch_1"
  input: "cond_7/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "local4/weights/ExponentialMovingAverage"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local4/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "local4/weights/ExponentialMovingAverage"
  input: "cond_7/Merge"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local4/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "local4/weights/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "local4/biases"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_8/Switch"
  op: "Switch"
  input: "IsVariableInitialized_7"
  input: "IsVariableInitialized_7"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_8/switch_t"
  op: "Identity"
  input: "cond_8/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_8/switch_f"
  op: "Identity"
  input: "cond_8/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_8/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_7"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_8/read/Switch"
  op: "RefSwitch"
  input: "local4/biases"
  input: "cond_8/pred_id"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "cond_8/read"
  op: "Identity"
  input: "cond_8/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "cond_8/Switch_1"
  op: "Switch"
  input: "local4/biases/Initializer/Const"
  input: "cond_8/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "cond_8/Merge"
  op: "Merge"
  input: "cond_8/Switch_1"
  input: "cond_8/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "local4/biases/ExponentialMovingAverage"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local4/biases/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "local4/biases/ExponentialMovingAverage"
  input: "cond_8/Merge"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local4/biases/ExponentialMovingAverage/read"
  op: "Identity"
  input: "local4/biases/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "softmax_linear/weights"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_9/Switch"
  op: "Switch"
  input: "IsVariableInitialized_8"
  input: "IsVariableInitialized_8"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_9/switch_t"
  op: "Identity"
  input: "cond_9/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_9/switch_f"
  op: "Identity"
  input: "cond_9/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_9/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_8"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_9/read/Switch"
  op: "RefSwitch"
  input: "softmax_linear/weights"
  input: "cond_9/pred_id"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_9/read"
  op: "Identity"
  input: "cond_9/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_9/Switch_1"
  op: "Switch"
  input: "softmax_linear/weights/Initializer/truncated_normal"
  input: "cond_9/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_9/Merge"
  op: "Merge"
  input: "cond_9/Switch_1"
  input: "cond_9/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_linear/weights/ExponentialMovingAverage"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "softmax_linear/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "softmax_linear/weights/ExponentialMovingAverage"
  input: "cond_9/Merge"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "softmax_linear/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "softmax_linear/weights/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "softmax_linear/biases"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_10/Switch"
  op: "Switch"
  input: "IsVariableInitialized_9"
  input: "IsVariableInitialized_9"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_10/switch_t"
  op: "Identity"
  input: "cond_10/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_10/switch_f"
  op: "Identity"
  input: "cond_10/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_10/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_9"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_10/read/Switch"
  op: "RefSwitch"
  input: "softmax_linear/biases"
  input: "cond_10/pred_id"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_10/read"
  op: "Identity"
  input: "cond_10/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_10/Switch_1"
  op: "Switch"
  input: "softmax_linear/biases/Initializer/Const"
  input: "cond_10/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_10/Merge"
  op: "Merge"
  input: "cond_10/Switch_1"
  input: "cond_10/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_linear/biases/ExponentialMovingAverage"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "softmax_linear/biases/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "softmax_linear/biases/ExponentialMovingAverage"
  input: "cond_10/Merge"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "softmax_linear/biases/ExponentialMovingAverage/read"
  op: "Identity"
  input: "softmax_linear/biases/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/decay"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9998999834060669
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/num_updates"
  op: "Cast"
  input: "global_step/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/add/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/add"
  op: "Add"
  input: "ExponentialMovingAverage/add/x"
  input: "ExponentialMovingAverage/num_updates"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/add_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 10.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/add_1"
  op: "Add"
  input: "ExponentialMovingAverage/add_1/x"
  input: "ExponentialMovingAverage/num_updates"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/truediv"
  op: "RealDiv"
  input: "ExponentialMovingAverage/add"
  input: "ExponentialMovingAverage/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/Minimum"
  op: "Minimum"
  input: "ExponentialMovingAverage/decay"
  input: "ExponentialMovingAverage/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub/x"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "conv1/weights/ExponentialMovingAverage/read"
  input: "conv1/weights/read"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg"
  op: "AssignSub"
  input: "conv1/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg/mul"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub/x"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "conv1/biases/ExponentialMovingAverage/read"
  input: "conv1/biases/read"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1"
  op: "AssignSub"
  input: "conv1/biases/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/mul"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub/x"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub_1"
  op: "Sub"
  input: "conv2/weights/ExponentialMovingAverage/read"
  input: "conv2/weights/read"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2"
  op: "AssignSub"
  input: "conv2/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/mul"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/sub/x"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/sub_1"
  op: "Sub"
  input: "conv2/biases/ExponentialMovingAverage/read"
  input: "conv2/biases/read"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/sub"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3"
  op: "AssignSub"
  input: "conv2/biases/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/mul"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/sub/x"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/sub_1"
  op: "Sub"
  input: "local3/weights/ExponentialMovingAverage/read"
  input: "local3/weights/read"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/sub"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4"
  op: "AssignSub"
  input: "local3/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/mul"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/sub/x"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/sub_1"
  op: "Sub"
  input: "local3/biases/ExponentialMovingAverage/read"
  input: "local3/biases/read"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/sub"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5"
  op: "AssignSub"
  input: "local3/biases/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/mul"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/sub/x"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/sub_1"
  op: "Sub"
  input: "local4/weights/ExponentialMovingAverage/read"
  input: "local4/weights/read"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/sub"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6"
  op: "AssignSub"
  input: "local4/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/mul"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/sub/x"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/sub_1"
  op: "Sub"
  input: "local4/biases/ExponentialMovingAverage/read"
  input: "local4/biases/read"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/sub"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7"
  op: "AssignSub"
  input: "local4/biases/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/mul"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_8/sub/x"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_8/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_8/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_8/sub_1"
  op: "Sub"
  input: "softmax_linear/weights/ExponentialMovingAverage/read"
  input: "softmax_linear/weights/read"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_8/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_8/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_8/sub"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_8"
  op: "AssignSub"
  input: "softmax_linear/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_8/mul"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_9/sub/x"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_9/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_9/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_9/sub_1"
  op: "Sub"
  input: "softmax_linear/biases/ExponentialMovingAverage/read"
  input: "softmax_linear/biases/read"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_9/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_9/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_9/sub"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_9"
  op: "AssignSub"
  input: "softmax_linear/biases/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_9/mul"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage"
  op: "NoOp"
  input: "^ExponentialMovingAverage/AssignMovingAvg"
  input: "^ExponentialMovingAverage/AssignMovingAvg_1"
  input: "^ExponentialMovingAverage/AssignMovingAvg_2"
  input: "^ExponentialMovingAverage/AssignMovingAvg_3"
  input: "^ExponentialMovingAverage/AssignMovingAvg_4"
  input: "^ExponentialMovingAverage/AssignMovingAvg_5"
  input: "^ExponentialMovingAverage/AssignMovingAvg_6"
  input: "^ExponentialMovingAverage/AssignMovingAvg_7"
  input: "^ExponentialMovingAverage/AssignMovingAvg_8"
  input: "^ExponentialMovingAverage/AssignMovingAvg_9"
  device: "/device:CPU:0"
}
node {
  name: "train"
  op: "NoOp"
  input: "^GradientDescent"
  input: "^ExponentialMovingAverage"
}
node {
  name: "init/NoOp"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^conv1/weight_loss/avg/Assign"
  input: "^conv2/weight_loss/avg/Assign"
  input: "^local3/weight_loss/avg/Assign"
  input: "^local4/weight_loss/avg/Assign"
  input: "^softmax_linear/weight_loss/avg/Assign"
  input: "^cross_entropy/avg/Assign"
  input: "^total_loss/avg/Assign"
}
node {
  name: "init/NoOp_1"
  op: "NoOp"
  input: "^conv1/weights/Assign"
  input: "^conv1/biases/Assign"
  input: "^conv2/weights/Assign"
  input: "^conv2/biases/Assign"
  input: "^local3/weights/Assign"
  input: "^local3/biases/Assign"
  input: "^local4/weights/Assign"
  input: "^local4/biases/Assign"
  input: "^softmax_linear/weights/Assign"
  input: "^softmax_linear/biases/Assign"
  input: "^conv1/weights/ExponentialMovingAverage/Assign"
  input: "^conv1/biases/ExponentialMovingAverage/Assign"
  input: "^conv2/weights/ExponentialMovingAverage/Assign"
  input: "^conv2/biases/ExponentialMovingAverage/Assign"
  input: "^local3/weights/ExponentialMovingAverage/Assign"
  input: "^local3/biases/ExponentialMovingAverage/Assign"
  input: "^local4/weights/ExponentialMovingAverage/Assign"
  input: "^local4/biases/ExponentialMovingAverage/Assign"
  input: "^softmax_linear/weights/ExponentialMovingAverage/Assign"
  input: "^softmax_linear/biases/ExponentialMovingAverage/Assign"
  device: "/device:CPU:0"
}
node {
  name: "init"
  op: "NoOp"
  input: "^init/NoOp"
  input: "^init/NoOp_1"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "conv1/weights"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "conv1/biases"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "conv2/weights"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "conv2/biases"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "local3/weights"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "local3/biases"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "local4/weights"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "local4/biases"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "softmax_linear/weights"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "softmax_linear/biases"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "conv1/weight_loss/avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "conv2/weight_loss/avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "local3/weight_loss/avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "local4/weight_loss/avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "softmax_linear/weight_loss/avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "cross_entropy/avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cross_entropy/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "total_loss/avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "conv1/weights/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "conv1/biases/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "conv2/weights/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "conv2/biases/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "local3/weights/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "local3/biases/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "local4/weights/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "local4/biases/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "softmax_linear/weights/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "softmax_linear/biases/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  attr {
    key: "N"
    value {
      i: 28
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 28
          }
        }
        string_val: "global_step"
        string_val: "conv1/weights"
        string_val: "conv1/biases"
        string_val: "conv2/weights"
        string_val: "conv2/biases"
        string_val: "local3/weights"
        string_val: "local3/biases"
        string_val: "local4/weights"
        string_val: "local4/biases"
        string_val: "softmax_linear/weights"
        string_val: "softmax_linear/biases"
        string_val: "conv1/weight_loss/avg"
        string_val: "conv2/weight_loss/avg"
        string_val: "local3/weight_loss/avg"
        string_val: "local4/weight_loss/avg"
        string_val: "softmax_linear/weight_loss/avg"
        string_val: "cross_entropy/avg"
        string_val: "total_loss/avg"
        string_val: "conv1/weights/ExponentialMovingAverage"
        string_val: "conv1/biases/ExponentialMovingAverage"
        string_val: "conv2/weights/ExponentialMovingAverage"
        string_val: "conv2/biases/ExponentialMovingAverage"
        string_val: "local3/weights/ExponentialMovingAverage"
        string_val: "local3/biases/ExponentialMovingAverage"
        string_val: "local4/weights/ExponentialMovingAverage"
        string_val: "local4/biases/ExponentialMovingAverage"
        string_val: "softmax_linear/weights/ExponentialMovingAverage"
        string_val: "softmax_linear/biases/ExponentialMovingAverage"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_0"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/Gather"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "conv1/weights"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "conv1/biases"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "conv2/weights"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "conv2/biases"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "local3/weights"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "local3/biases"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "local4/weights"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "local4/biases"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "softmax_linear/weights"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "softmax_linear/biases"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "conv1/weight_loss/avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "conv2/weight_loss/avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "local3/weight_loss/avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "local4/weight_loss/avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "softmax_linear/weight_loss/avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "cross_entropy/avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cross_entropy/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "total_loss/avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "conv1/weights/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "conv1/biases/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "conv2/weights/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "conv2/biases/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "local3/weights/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "local3/biases/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "local4/weights/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "local4/biases/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "softmax_linear/weights/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "softmax_linear/biases/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  input: "report_uninitialized_variables_1/IsVariableInitialized_22"
  input: "report_uninitialized_variables_1/IsVariableInitialized_23"
  input: "report_uninitialized_variables_1/IsVariableInitialized_24"
  input: "report_uninitialized_variables_1/IsVariableInitialized_25"
  input: "report_uninitialized_variables_1/IsVariableInitialized_26"
  input: "report_uninitialized_variables_1/IsVariableInitialized_27"
  attr {
    key: "N"
    value {
      i: 28
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 28
          }
        }
        string_val: "global_step"
        string_val: "conv1/weights"
        string_val: "conv1/biases"
        string_val: "conv2/weights"
        string_val: "conv2/biases"
        string_val: "local3/weights"
        string_val: "local3/biases"
        string_val: "local4/weights"
        string_val: "local4/biases"
        string_val: "softmax_linear/weights"
        string_val: "softmax_linear/biases"
        string_val: "conv1/weight_loss/avg"
        string_val: "conv2/weight_loss/avg"
        string_val: "local3/weight_loss/avg"
        string_val: "local4/weight_loss/avg"
        string_val: "softmax_linear/weight_loss/avg"
        string_val: "cross_entropy/avg"
        string_val: "total_loss/avg"
        string_val: "conv1/weights/ExponentialMovingAverage"
        string_val: "conv1/biases/ExponentialMovingAverage"
        string_val: "conv2/weights/ExponentialMovingAverage"
        string_val: "conv2/biases/ExponentialMovingAverage"
        string_val: "local3/weights/ExponentialMovingAverage"
        string_val: "local3/biases/ExponentialMovingAverage"
        string_val: "local4/weights/ExponentialMovingAverage"
        string_val: "local4/biases/ExponentialMovingAverage"
        string_val: "softmax_linear/weights/ExponentialMovingAverage"
        string_val: "softmax_linear/biases/ExponentialMovingAverage"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_0"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "input_producer/input_producer/fraction_of_32_full"
  input: "shuffle_batch/fraction_over_200_of_384_full"
  input: "images"
  input: "conv1/conv1/conv1/activations"
  input: "conv1/conv1/conv1/sparsity"
  input: "conv2/conv2/conv2/activations"
  input: "conv2/conv2/conv2/sparsity"
  input: "local3/local3/local3/activations"
  input: "local3/local3/local3/sparsity"
  input: "local4/local4/local4/activations"
  input: "local4/local4/local4/sparsity"
  input: "softmax_linear/softmax_linear/softmax_linear/activations"
  input: "softmax_linear/softmax_linear/softmax_linear/sparsity"
  input: "learning_rate"
  input: "conv1/weight_loss__raw_"
  input: "conv1/weight_loss_1"
  input: "conv2/weight_loss__raw_"
  input: "conv2/weight_loss_1"
  input: "local3/weight_loss__raw_"
  input: "local3/weight_loss_1"
  input: "local4/weight_loss__raw_"
  input: "local4/weight_loss_1"
  input: "softmax_linear/weight_loss__raw_"
  input: "softmax_linear/weight_loss_1"
  input: "cross_entropy__raw_"
  input: "cross_entropy_1"
  input: "total_loss__raw_"
  input: "total_loss_1"
  input: "conv1/weights_1"
  input: "conv1/biases_1"
  input: "conv2/weights_1"
  input: "conv2/biases_1"
  input: "local3/weights_1"
  input: "local3/biases_1"
  input: "local4/weights_1"
  input: "local4/biases_1"
  input: "softmax_linear/weights_1"
  input: "softmax_linear/biases_1"
  input: "conv1/weights/gradients"
  input: "conv1/biases/gradients"
  input: "conv2/weights/gradients"
  input: "conv2/biases/gradients"
  input: "local3/weights/gradients"
  input: "local3/biases/gradients"
  input: "local4/weights/gradients"
  input: "local4/biases/gradients"
  input: "softmax_linear/weights/gradients"
  input: "softmax_linear/biases/gradients"
  attr {
    key: "N"
    value {
      i: 48
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_59906df746a1421d90d20140622ad187/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 8
          }
        }
        string_val: "conv1/weight_loss/avg"
        string_val: "conv2/weight_loss/avg"
        string_val: "cross_entropy/avg"
        string_val: "global_step"
        string_val: "local3/weight_loss/avg"
        string_val: "local4/weight_loss/avg"
        string_val: "softmax_linear/weight_loss/avg"
        string_val: "total_loss/avg"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 8
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "conv1/weight_loss/avg"
  input: "conv2/weight_loss/avg"
  input: "cross_entropy/avg"
  input: "global_step"
  input: "local3/weight_loss/avg"
  input: "local4/weight_loss/avg"
  input: "softmax_linear/weight_loss/avg"
  input: "total_loss/avg"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename_1/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 20
          }
        }
        string_val: "conv1/biases"
        string_val: "conv1/biases/ExponentialMovingAverage"
        string_val: "conv1/weights"
        string_val: "conv1/weights/ExponentialMovingAverage"
        string_val: "conv2/biases"
        string_val: "conv2/biases/ExponentialMovingAverage"
        string_val: "conv2/weights"
        string_val: "conv2/weights/ExponentialMovingAverage"
        string_val: "local3/biases"
        string_val: "local3/biases/ExponentialMovingAverage"
        string_val: "local3/weights"
        string_val: "local3/weights/ExponentialMovingAverage"
        string_val: "local4/biases"
        string_val: "local4/biases/ExponentialMovingAverage"
        string_val: "local4/weights"
        string_val: "local4/weights/ExponentialMovingAverage"
        string_val: "softmax_linear/biases"
        string_val: "softmax_linear/biases/ExponentialMovingAverage"
        string_val: "softmax_linear/weights"
        string_val: "softmax_linear/weights/ExponentialMovingAverage"
      }
    }
  }
}
node {
  name: "save/SaveV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 20
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2_1"
  op: "SaveV2"
  input: "save/ShardedFilename_1"
  input: "save/SaveV2_1/tensor_names"
  input: "save/SaveV2_1/shape_and_slices"
  input: "conv1/biases"
  input: "conv1/biases/ExponentialMovingAverage"
  input: "conv1/weights"
  input: "conv1/weights/ExponentialMovingAverage"
  input: "conv2/biases"
  input: "conv2/biases/ExponentialMovingAverage"
  input: "conv2/weights"
  input: "conv2/weights/ExponentialMovingAverage"
  input: "local3/biases"
  input: "local3/biases/ExponentialMovingAverage"
  input: "local3/weights"
  input: "local3/weights/ExponentialMovingAverage"
  input: "local4/biases"
  input: "local4/biases/ExponentialMovingAverage"
  input: "local4/weights"
  input: "local4/weights/ExponentialMovingAverage"
  input: "softmax_linear/biases"
  input: "softmax_linear/biases/ExponentialMovingAverage"
  input: "softmax_linear/weights"
  input: "softmax_linear/weights/ExponentialMovingAverage"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency_1"
  op: "Identity"
  input: "save/ShardedFilename_1"
  input: "^save/SaveV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "save/ShardedFilename_1"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  input: "^save/MergeV2Checkpoints"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv1/weight_loss/avg"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "conv1/weight_loss/avg"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2/weight_loss/avg"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "conv2/weight_loss/avg"
  input: "save/RestoreV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "cross_entropy/avg"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_2/tensor_names"
  input: "save/RestoreV2_2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "cross_entropy/avg"
  input: "save/RestoreV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cross_entropy/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_3/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_3"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_3/tensor_names"
  input: "save/RestoreV2_3/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2_3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_4/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "local3/weight_loss/avg"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_4"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_4/tensor_names"
  input: "save/RestoreV2_4/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "local3/weight_loss/avg"
  input: "save/RestoreV2_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_5/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "local4/weight_loss/avg"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_5"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_5/tensor_names"
  input: "save/RestoreV2_5/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "local4/weight_loss/avg"
  input: "save/RestoreV2_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_6/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "softmax_linear/weight_loss/avg"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_6"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_6/tensor_names"
  input: "save/RestoreV2_6/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "softmax_linear/weight_loss/avg"
  input: "save/RestoreV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weight_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_7/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "total_loss/avg"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_7"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_7/tensor_names"
  input: "save/RestoreV2_7/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "total_loss/avg"
  input: "save/RestoreV2_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
}
node {
  name: "save/RestoreV2_8/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv1/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_8/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_8"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_8/tensor_names"
  input: "save/RestoreV2_8/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "conv1/biases"
  input: "save/RestoreV2_8"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_9/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv1/biases/ExponentialMovingAverage"
      }
    }
  }
}
node {
  name: "save/RestoreV2_9/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_9"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_9/tensor_names"
  input: "save/RestoreV2_9/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "conv1/biases/ExponentialMovingAverage"
  input: "save/RestoreV2_9"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_10/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv1/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_10/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_10"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_10/tensor_names"
  input: "save/RestoreV2_10/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "conv1/weights"
  input: "save/RestoreV2_10"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_11/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv1/weights/ExponentialMovingAverage"
      }
    }
  }
}
node {
  name: "save/RestoreV2_11/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_11"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_11/tensor_names"
  input: "save/RestoreV2_11/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "conv1/weights/ExponentialMovingAverage"
  input: "save/RestoreV2_11"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_12/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_12/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_12"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_12/tensor_names"
  input: "save/RestoreV2_12/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "conv2/biases"
  input: "save/RestoreV2_12"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_13/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2/biases/ExponentialMovingAverage"
      }
    }
  }
}
node {
  name: "save/RestoreV2_13/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_13"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_13/tensor_names"
  input: "save/RestoreV2_13/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "conv2/biases/ExponentialMovingAverage"
  input: "save/RestoreV2_13"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_14/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_14/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_14"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_14/tensor_names"
  input: "save/RestoreV2_14/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "conv2/weights"
  input: "save/RestoreV2_14"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_15/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2/weights/ExponentialMovingAverage"
      }
    }
  }
}
node {
  name: "save/RestoreV2_15/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_15"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_15/tensor_names"
  input: "save/RestoreV2_15/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "conv2/weights/ExponentialMovingAverage"
  input: "save/RestoreV2_15"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_16/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "local3/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_16/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_16"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_16/tensor_names"
  input: "save/RestoreV2_16/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "local3/biases"
  input: "save/RestoreV2_16"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_17/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "local3/biases/ExponentialMovingAverage"
      }
    }
  }
}
node {
  name: "save/RestoreV2_17/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_17"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_17/tensor_names"
  input: "save/RestoreV2_17/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "local3/biases/ExponentialMovingAverage"
  input: "save/RestoreV2_17"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_18/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "local3/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_18/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_18"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_18/tensor_names"
  input: "save/RestoreV2_18/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "local3/weights"
  input: "save/RestoreV2_18"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_19/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "local3/weights/ExponentialMovingAverage"
      }
    }
  }
}
node {
  name: "save/RestoreV2_19/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_19"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_19/tensor_names"
  input: "save/RestoreV2_19/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "local3/weights/ExponentialMovingAverage"
  input: "save/RestoreV2_19"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local3/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_20/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "local4/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_20/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_20"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_20/tensor_names"
  input: "save/RestoreV2_20/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "local4/biases"
  input: "save/RestoreV2_20"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_21/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "local4/biases/ExponentialMovingAverage"
      }
    }
  }
}
node {
  name: "save/RestoreV2_21/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_21"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_21/tensor_names"
  input: "save/RestoreV2_21/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "local4/biases/ExponentialMovingAverage"
  input: "save/RestoreV2_21"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_22/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "local4/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_22/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_22"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_22/tensor_names"
  input: "save/RestoreV2_22/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "local4/weights"
  input: "save/RestoreV2_22"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_23/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "local4/weights/ExponentialMovingAverage"
      }
    }
  }
}
node {
  name: "save/RestoreV2_23/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_23"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_23/tensor_names"
  input: "save/RestoreV2_23/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "local4/weights/ExponentialMovingAverage"
  input: "save/RestoreV2_23"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local4/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_24/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "softmax_linear/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_24/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_24"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_24/tensor_names"
  input: "save/RestoreV2_24/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "softmax_linear/biases"
  input: "save/RestoreV2_24"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_25/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "softmax_linear/biases/ExponentialMovingAverage"
      }
    }
  }
}
node {
  name: "save/RestoreV2_25/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_25"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_25/tensor_names"
  input: "save/RestoreV2_25/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "softmax_linear/biases/ExponentialMovingAverage"
  input: "save/RestoreV2_25"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_26/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "softmax_linear/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_26/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_26"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_26/tensor_names"
  input: "save/RestoreV2_26/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "softmax_linear/weights"
  input: "save/RestoreV2_26"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_27/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "softmax_linear/weights/ExponentialMovingAverage"
      }
    }
  }
}
node {
  name: "save/RestoreV2_27/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_27"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_27/tensor_names"
  input: "save/RestoreV2_27/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "softmax_linear/weights/ExponentialMovingAverage"
  input: "save/RestoreV2_27"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@softmax_linear/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard_1"
  op: "NoOp"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all/NoOp"
  op: "NoOp"
  input: "^save/restore_shard"
}
node {
  name: "save/restore_all/NoOp_1"
  op: "NoOp"
  input: "^save/restore_shard_1"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_all/NoOp"
  input: "^save/restore_all/NoOp_1"
}
versions {
  producer: 22
}
